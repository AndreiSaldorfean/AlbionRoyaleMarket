{"ast":null,"code":"import{Mount}from\"./classMount\";import transport_mounts from'../json_input/transport_mounts.json';import mapGraphJson from'../json_input/cities.json';// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\nconst REFINING_BONUS=1.58;const CRAFTING_BONUS=1.33;const MARKET_PERCENTAGE=0.92;const TAX=0.08;const TAX_HI=0.12;function computeTime(playerMount,mapGraph,dict,startingCity){let totalTime=0;let currentCity=startingCity;for(const item of Object.entries(dict[\"recipe\"][\"buy\"])){if(currentCity===item[1][\"city_buy\"]){continue;}totalTime+=playerMount.cityTravelTime(mapGraph,currentCity,item[1][\"city_buy\"]);currentCity=item[1][\"city_buy\"];}for(const item of Object.entries(dict[\"recipe\"][\"craft\"])){if(currentCity===item[1][\"city_buy\"]){continue;}totalTime+=playerMount.cityTravelTime(mapGraph,currentCity,item[1][\"city_buy\"]);currentCity=item[1][\"city_buy\"];}return parseInt(totalTime)+1;}function computeCarryingCapacity(playerMount,itemWeight){return parseInt(playerMount.getCarryLoad()/itemWeight);}function getAmount(recipe,investment){let sum=0;for(const item in recipe){const tempAmount=parseInt(recipe[item][1][\"amount\"],10);sum+=tempAmount*parseInt(recipe[item][1][\"price_buy\"],10);}return investment/sum;}function computeRound(buyList,craftList,market_price){const amount=buyList[\"amount\"];const craft_price=amount*buyList[\"price_buy\"];const mp=market_price[\"price_buy\"]*market_price[\"amount\"];if(craft_price>mp){return 1;}else{market_price[\"amount\"]=amount;market_price[\"price_buy\"]=craftList[\"amount\"]*parseInt(buyList[\"price_buy\"]);//price per craft,\n//how much it costs to craft one item,\n//not profit per crafted item!\n}}function computeProfit(item,investment){let buyingList=Object.entries(item[\"recipe\"][\"buy\"]);let craftingList=Object.entries(item[\"recipe\"][\"craft\"]);const priceSell=parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"]*MARKET_PERCENTAGE);if(craftingList==undefined)return-1;const nca=parseInt(getAmount(buyingList,investment));let gca=nca*REFINING_BONUS;let quantity=0;let initCost=0;// if(craftingList[0][0] == buyingList[0][0]){\n//     buyingList.pop(0);\n// }\nlet subNca=nca;for(let i=0;i<=craftingList.length-1;i++){craftingList[i][1][\"amount\"]=subNca;subNca=parseFloat(subNca/REFINING_BONUS);}subNca=nca;for(let i=0;i<=buyingList.length-1;i++){buyingList[i][1][\"amount\"]=parseInt(buyingList[i][1][\"amount\"])*subNca;subNca=parseFloat(subNca/REFINING_BONUS);}//Init\n{const index=buyingList.length-1;const amount=parseInt(buyingList[index][1][\"amount\"]);const craft_price=amount*nca/REFINING_BONUS*buyingList[index][1][\"price_buy\"];const market_price=amount*nca*craftingList[index][1][\"price_buy\"];if(craft_price>market_price){buyingList.pop(index);craftingList[index][1][\"amount\"]=amount*nca;}else{craftingList[index][1][\"amount\"]=parseInt(amount*nca/REFINING_BONUS);craftingList[index][1][\"price_buy\"]=craftingList[index][1][\"amount\"]*parseInt(buyingList[index][1][\"price_buy\"])/nca;//price per craft,\n//how much it costs to craft one item,\n//not profit per crafted item!\n}}for(let i=buyingList.length-2;i>0;i--){// console.log(craftingList);\n// console.log(buyingList);\n// console.log(j);\n// console.log(craftingList[j][1]);\n// console.log(buyingList);\n// console.log(buyingList[j]);\n// console.log(buyingList[j][1]);\n// let amount_m1 = craftingList[i+1][1][\"amount\"];  \n// let ppc_m1    = craftingList[i+1][1][\"price_buy\"];\n// //console.log(ppc_m1);\n// initCost += ppc_m1*amount_m1;\n// initCost += buyingList[j][1][\"price_buy\"]*buyingList[j][1][\"amount\"]*nca;\nif(computeRound(buyingList[i][1],craftingList[i][1],craftingList[i+1][1]))buyingList.pop(i);}//console.log(initCost);\nconst gain=priceSell*gca;//console.log(priceSell);\n//console.log(gain);\nlet profit=gain-initCost;//console.log(profit);\nreturn gain-initCost;}function computeRoi(investment,profit){return parseInt(profit/investment*100);}function formatNumber(num){let string=\"\";if(num>1000000000){string=(num/1000000000).toFixed(2)+\"b\";}else if(num>1000000){string=(num/1000000).toFixed(2)+\"m\";}else if(num>1000){string=(num/1000).toFixed(2)+\"k\";}return string;}function final_json(p_items,site_input){var mount=transport_mounts[site_input[\"mount\"]];var mountObj=new Mount(mount[\"Gallop delay\"],mount[\"Move bonus\"],mount[\"Gallop bonus\"],mount[\"Carry capacity\"]);p_items.map(item=>{item[1][\"time\"]=computeTime(mountObj,mapGraphJson,item[1],site_input[\"current_city\"]);item[1][\"carrying_capacity\"]=site_input[\"carrying_capacity\"];item[1][\"profit\"]=computeProfit(item[1],site_input[\"investment\"]);console.log(item[1][\"profit\"]);// item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\nitem[1][\"roi\"]=0;});return p_items;}function compute_item(item){let site_input=JSON.parse(localStorage.getItem(\"site_input\"));var mount=transport_mounts[site_input[\"mount\"]];var mountObj=new Mount(mount[\"Gallop delay\"],mount[\"Move bonus\"],mount[\"Gallop bonus\"],mount[\"Carry capacity\"]);item[\"time\"]=computeTime(mountObj,mapGraphJson,item,site_input[\"current_city\"]);item[\"carrying_capacity\"]=site_input[\"carrying_capacity\"];item[\"profit\"]=computeProfit(item,site_input[\"investment\"]);item[\"roi\"]=computeRoi(site_input[\"investment\"],item[\"profit\"]);return item;}export{final_json,compute_item};","map":{"version":3,"names":["Mount","transport_mounts","mapGraphJson","REFINING_BONUS","CRAFTING_BONUS","MARKET_PERCENTAGE","TAX","TAX_HI","computeTime","playerMount","mapGraph","dict","startingCity","totalTime","currentCity","item","Object","entries","cityTravelTime","parseInt","computeCarryingCapacity","itemWeight","getCarryLoad","getAmount","recipe","investment","sum","tempAmount","computeRound","buyList","craftList","market_price","amount","craft_price","mp","computeProfit","buyingList","craftingList","priceSell","undefined","nca","gca","quantity","initCost","subNca","i","length","parseFloat","index","pop","gain","profit","computeRoi","formatNumber","num","string","toFixed","final_json","p_items","site_input","mount","mountObj","map","console","log","compute_item","JSON","parse","localStorage","getItem"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\nimport mapGraphJson from '../json_input/cities.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nconst REFINING_BONUS=1.58\r\nconst CRAFTING_BONUS=1.33\r\nconst MARKET_PERCENTAGE=0.92 \r\nconst TAX =0.08\r\nconst TAX_HI =0.12\r\n\r\nfunction computeTime(playerMount,mapGraph, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction getAmount(recipe,investment){\r\n    let sum = 0;\r\n    for(const item in recipe){\r\n        const tempAmount =parseInt(recipe[item][1][\"amount\"],10);\r\n        sum +=tempAmount*parseInt(recipe[item][1][\"price_buy\"],10);\r\n    }\r\n    return investment/sum;\r\n}\r\n\r\nfunction computeRound(buyList,craftList,market_price){\r\n    const amount = buyList[\"amount\"];\r\n    const craft_price = amount*buyList[\"price_buy\"];\r\n    const mp = market_price[\"price_buy\"]*market_price[\"amount\"];\r\n    if(craft_price > mp){\r\n        return 1;\r\n    }else{\r\n        market_price[\"amount\"] = amount;\r\n        market_price[\"price_buy\"] = craftList[\"amount\"]*parseInt(buyList[\"price_buy\"]);//price per craft,\r\n                                                                                        //how much it costs to craft one item,\r\n                                                                                        //not profit per crafted item!\r\n    }\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    let buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\r\n    let craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\r\n    const priceSell = parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"] * MARKET_PERCENTAGE);\r\n    if(craftingList == undefined)return -1;\r\n    const nca = parseInt(getAmount(buyingList,investment));\r\n    let gca = nca*REFINING_BONUS;\r\n    let quantity = 0;\r\n    let initCost = 0;\r\n\r\n    // if(craftingList[0][0] == buyingList[0][0]){\r\n    //     buyingList.pop(0);\r\n    // }\r\n\r\n    let subNca = nca;\r\n    for (let i = 0; i<=craftingList.length-1;i++) {\r\n        craftingList[i][1][\"amount\"] = subNca;\r\n        subNca = parseFloat(subNca/REFINING_BONUS);\r\n    }\r\n    subNca = nca;\r\n        for (let i = 0; i<=buyingList.length-1;i++) {\r\n        buyingList[i][1][\"amount\"] = parseInt(buyingList[i][1][\"amount\"])*subNca;\r\n        subNca = parseFloat(subNca/REFINING_BONUS);\r\n    }\r\n\r\n    //Init\r\n    {\r\n        const index = buyingList.length-1;\r\n        const amount = parseInt(buyingList[index][1][\"amount\"]);\r\n        const craft_price = (amount*nca/REFINING_BONUS)*buyingList[index][1][\"price_buy\"];\r\n        const market_price = (amount*nca*craftingList[index][1][\"price_buy\"]);\r\n        if(craft_price > market_price){\r\n            buyingList.pop(index);\r\n            craftingList[index][1][\"amount\"] = amount*nca;\r\n        }else{\r\n            craftingList[index][1][\"amount\"] = parseInt(amount*nca/REFINING_BONUS);\r\n            craftingList[index][1][\"price_buy\"] = craftingList[index][1][\"amount\"]*\r\n                                                  parseInt(buyingList[index][1][\"price_buy\"])/nca;//price per craft,\r\n                                                                                                  //how much it costs to craft one item,\r\n                                                                                                  //not profit per crafted item!\r\n        }\r\n    }\r\n    for (let i = buyingList.length - 2; i>0;i--) {\r\n        // console.log(craftingList);\r\n        // console.log(buyingList);\r\n        // console.log(j);\r\n        // console.log(craftingList[j][1]);\r\n        // console.log(buyingList);\r\n        // console.log(buyingList[j]);\r\n        // console.log(buyingList[j][1]);\r\n\r\n        // let amount_m1 = craftingList[i+1][1][\"amount\"];  \r\n        // let ppc_m1    = craftingList[i+1][1][\"price_buy\"];\r\n        // //console.log(ppc_m1);\r\n        // initCost += ppc_m1*amount_m1;\r\n        // initCost += buyingList[j][1][\"price_buy\"]*buyingList[j][1][\"amount\"]*nca;\r\n        if(computeRound(buyingList[i][1],craftingList[i][1],craftingList[i+1][1]))buyingList.pop(i);\r\n    }\r\n\r\n    //console.log(initCost);\r\n    const gain = priceSell *gca;\r\n    //console.log(priceSell);\r\n    //console.log(gain);\r\n    let profit = gain-initCost;\r\n    //console.log(profit);\r\n    return gain - initCost;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    p_items.map((item)=>{\r\n        item[1][\"time\"]             = computeTime(mountObj,\r\n                                        mapGraphJson,\r\n                                        item[1],\r\n                                        site_input[\"current_city\"]);\r\n        item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        item[1][\"profit\"]           = computeProfit(item[1],site_input[\"investment\"]);\r\n        console.log(item[1][\"profit\"]);\r\n        // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n        item[1][\"roi\"]               = 0;\r\n    })\r\n    return p_items;\r\n}\r\n\r\nfunction compute_item(item){\r\n    let site_input = JSON.parse(localStorage.getItem(\"site_input\"));\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    \r\n    \r\n    item[\"time\"]              = computeTime(mountObj,\r\n                                mapGraphJson,\r\n                                item,\r\n                                site_input[\"current_city\"]);\r\n\r\n    item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n    item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n    item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n    return item;    \r\n}\r\n\r\nexport {final_json, compute_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}