{"ast":null,"code":"import { getRandom, getRangeValue, halfRandom, rangeColorToHsl } from \"@tsparticles/engine\";\nconst double = 2,\n  doublePI = Math.PI * double,\n  maxAngle = 360;\nexport function initParticle(particle) {\n  const rollOpt = particle.options.roll;\n  if (!rollOpt?.enable) {\n    particle.roll = {\n      enable: false,\n      horizontal: false,\n      vertical: false,\n      angle: 0,\n      speed: 0\n    };\n    return;\n  }\n  particle.roll = {\n    enable: rollOpt.enable,\n    horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n    vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n    angle: getRandom() * doublePI,\n    speed: getRangeValue(rollOpt.speed) / maxAngle\n  };\n  if (rollOpt.backColor) {\n    particle.backColor = rangeColorToHsl(rollOpt.backColor);\n  } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n    const alterType = getRandom() >= halfRandom ? \"darken\" : \"enlighten\";\n    particle.roll.alter = {\n      type: alterType,\n      value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n    };\n  } else if (rollOpt.darken.enable) {\n    particle.roll.alter = {\n      type: \"darken\",\n      value: getRangeValue(rollOpt.darken.value)\n    };\n  } else if (rollOpt.enlighten.enable) {\n    particle.roll.alter = {\n      type: \"enlighten\",\n      value: getRangeValue(rollOpt.enlighten.value)\n    };\n  }\n}\nexport function updateRoll(particle, delta) {\n  const roll = particle.options.roll,\n    data = particle.roll;\n  if (!data || !roll?.enable) {\n    return;\n  }\n  const speed = data.speed * delta.factor,\n    max = doublePI;\n  data.angle += speed;\n  if (data.angle > max) {\n    data.angle -= max;\n  }\n}","map":{"version":3,"names":["getRandom","getRangeValue","halfRandom","rangeColorToHsl","double","doublePI","Math","PI","maxAngle","initParticle","particle","rollOpt","options","roll","enable","horizontal","vertical","angle","speed","mode","backColor","darken","enlighten","alterType","alter","type","value","updateRoll","delta","data","factor","max"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/node_modules/@tsparticles/updater-roll/browser/Utils.js"],"sourcesContent":["import { getRandom, getRangeValue, halfRandom, rangeColorToHsl } from \"@tsparticles/engine\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= halfRandom ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,aAAa,EAAEC,UAAU,EAAEC,eAAe,QAAQ,qBAAqB;AAC3F,MAAMC,MAAM,GAAG,CAAC;EAAEC,QAAQ,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;EAAEI,QAAQ,GAAG,GAAG;AAC7D,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAE;EACnC,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAO,CAACC,IAAI;EACrC,IAAI,CAACF,OAAO,EAAEG,MAAM,EAAE;IAClBJ,QAAQ,CAACG,IAAI,GAAG;MACZC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,CAAC;MACRC,KAAK,EAAE;IACX,CAAC;IACD;EACJ;EACAR,QAAQ,CAACG,IAAI,GAAG;IACZC,MAAM,EAAEH,OAAO,CAACG,MAAM;IACtBC,UAAU,EAAEJ,OAAO,CAACQ,IAAI,KAAK,YAAY,IAAIR,OAAO,CAACQ,IAAI,KAAK,MAAM;IACpEH,QAAQ,EAAEL,OAAO,CAACQ,IAAI,KAAK,UAAU,IAAIR,OAAO,CAACQ,IAAI,KAAK,MAAM;IAChEF,KAAK,EAAEjB,SAAS,CAAC,CAAC,GAAGK,QAAQ;IAC7Ba,KAAK,EAAEjB,aAAa,CAACU,OAAO,CAACO,KAAK,CAAC,GAAGV;EAC1C,CAAC;EACD,IAAIG,OAAO,CAACS,SAAS,EAAE;IACnBV,QAAQ,CAACU,SAAS,GAAGjB,eAAe,CAACQ,OAAO,CAACS,SAAS,CAAC;EAC3D,CAAC,MACI,IAAIT,OAAO,CAACU,MAAM,CAACP,MAAM,IAAIH,OAAO,CAACW,SAAS,CAACR,MAAM,EAAE;IACxD,MAAMS,SAAS,GAAGvB,SAAS,CAAC,CAAC,IAAIE,UAAU,GAAG,QAAQ,GAAG,WAAW;IACpEQ,QAAQ,CAACG,IAAI,CAACW,KAAK,GAAG;MAClBC,IAAI,EAAEF,SAAS;MACfG,KAAK,EAAEzB,aAAa,CAACsB,SAAS,KAAK,QAAQ,GAAGZ,OAAO,CAACU,MAAM,CAACK,KAAK,GAAGf,OAAO,CAACW,SAAS,CAACI,KAAK;IAChG,CAAC;EACL,CAAC,MACI,IAAIf,OAAO,CAACU,MAAM,CAACP,MAAM,EAAE;IAC5BJ,QAAQ,CAACG,IAAI,CAACW,KAAK,GAAG;MAClBC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAEzB,aAAa,CAACU,OAAO,CAACU,MAAM,CAACK,KAAK;IAC7C,CAAC;EACL,CAAC,MACI,IAAIf,OAAO,CAACW,SAAS,CAACR,MAAM,EAAE;IAC/BJ,QAAQ,CAACG,IAAI,CAACW,KAAK,GAAG;MAClBC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAEzB,aAAa,CAACU,OAAO,CAACW,SAAS,CAACI,KAAK;IAChD,CAAC;EACL;AACJ;AACA,OAAO,SAASC,UAAUA,CAACjB,QAAQ,EAAEkB,KAAK,EAAE;EACxC,MAAMf,IAAI,GAAGH,QAAQ,CAACE,OAAO,CAACC,IAAI;IAAEgB,IAAI,GAAGnB,QAAQ,CAACG,IAAI;EACxD,IAAI,CAACgB,IAAI,IAAI,CAAChB,IAAI,EAAEC,MAAM,EAAE;IACxB;EACJ;EACA,MAAMI,KAAK,GAAGW,IAAI,CAACX,KAAK,GAAGU,KAAK,CAACE,MAAM;IAAEC,GAAG,GAAG1B,QAAQ;EACvDwB,IAAI,CAACZ,KAAK,IAAIC,KAAK;EACnB,IAAIW,IAAI,CAACZ,KAAK,GAAGc,GAAG,EAAE;IAClBF,IAAI,CAACZ,KAAK,IAAIc,GAAG;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}