{"ast":null,"code":"import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n  let res = map.get(container);\n  if (!res || force) {\n    res = await Promise.all([...initializers.values()].map(t => t(container)));\n    map.set(container, res);\n  }\n  return res;\n}\nasync function getDataFromUrl(data) {\n  const url = itemFromSingleOrMultiple(data.url, data.index);\n  if (!url) {\n    return data.fallback;\n  }\n  const response = await fetch(url);\n  if (response.ok) {\n    return await response.json();\n  }\n  getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n  return data.fallback;\n}\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.effectDrawers = new Map();\n    this.shapeDrawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get version() {\n    return \"3.3.0\";\n  }\n  addConfig(config) {\n    const key = config.key ?? config.name ?? \"default\";\n    this._configs.set(key, config);\n    this._eventDispatcher.dispatchEvent(\"configAdded\", {\n      data: {\n        name: key,\n        config\n      }\n    });\n  }\n  async addEffect(effect, drawer, refresh = true) {\n    executeOnSingleOrMultiple(effect, type => {\n      if (!this.getEffectDrawer(type)) {\n        this.effectDrawers.set(type, drawer);\n      }\n    });\n    await this.refresh(refresh);\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  async addInteractor(name, interactorInitializer, refresh = true) {\n    this._initializers.interactors.set(name, interactorInitializer);\n    await this.refresh(refresh);\n  }\n  async addMover(name, moverInitializer, refresh = true) {\n    this._initializers.movers.set(name, moverInitializer);\n    await this.refresh(refresh);\n  }\n  async addParticleUpdater(name, updaterInitializer, refresh = true) {\n    this._initializers.updaters.set(name, updaterInitializer);\n    await this.refresh(refresh);\n  }\n  async addPathGenerator(name, generator, refresh = true) {\n    if (!this.getPathGenerator(name)) {\n      this.pathGenerators.set(name, generator);\n    }\n    await this.refresh(refresh);\n  }\n  async addPlugin(plugin, refresh = true) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n    await this.refresh(refresh);\n  }\n  async addPreset(preset, options, override = false, refresh = true) {\n    if (override || !this.getPreset(preset)) {\n      this.presets.set(preset, options);\n    }\n    await this.refresh(refresh);\n  }\n  async addShape(shape, drawer, refresh = true) {\n    executeOnSingleOrMultiple(shape, type => {\n      if (!this.getShapeDrawer(type)) {\n        this.shapeDrawers.set(type, drawer);\n      }\n    });\n    await this.refresh(refresh);\n  }\n  clearPlugins(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this._domArray;\n  }\n  domItem(index) {\n    const dom = this.dom(),\n      item = dom[index];\n    if (!item || item.destroyed) {\n      const deleteCount = 1;\n      dom.splice(index, deleteCount);\n      return;\n    }\n    return item;\n  }\n  async getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      if (plugin.needsPlugin(container.actualOptions)) {\n        res.set(plugin.id, await plugin.getPlugin(container));\n      }\n    }\n    return res;\n  }\n  getEffectDrawer(type) {\n    return this.effectDrawers.get(type);\n  }\n  async getInteractors(container, force = false) {\n    return await getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  async getMovers(container, force = false) {\n    return await getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.shapeDrawers.get(type);\n  }\n  getSupportedEffects() {\n    return this.effectDrawers.keys();\n  }\n  getSupportedShapes() {\n    return this.shapeDrawers.keys();\n  }\n  async getUpdaters(container, force = false) {\n    return await getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  async load(params) {\n    const randomFactor = 10000,\n      id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * randomFactor)}`,\n      {\n        index,\n        url\n      } = params,\n      options = url ? await getDataFromUrl({\n        fallback: params.options,\n        url,\n        index\n      }) : params.options;\n    let domContainer = params.element ?? document.getElementById(id);\n    if (!domContainer) {\n      domContainer = document.createElement(\"div\");\n      domContainer.id = id;\n      document.body.append(domContainer);\n    }\n    const currentOptions = itemFromSingleOrMultiple(options, index),\n      dom = this.dom(),\n      oldIndex = dom.findIndex(v => v.id.description === id),\n      minIndex = 0;\n    if (oldIndex >= minIndex) {\n      const old = this.domItem(oldIndex);\n      if (old && !old.destroyed) {\n        old.destroy();\n        const deleteCount = 1;\n        dom.splice(oldIndex, deleteCount);\n      }\n    }\n    let canvasEl;\n    if (domContainer.tagName.toLowerCase() === \"canvas\") {\n      canvasEl = domContainer;\n      canvasEl.dataset[generatedAttribute] = \"false\";\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n      if (existingCanvases.length) {\n        const firstIndex = 0;\n        canvasEl = existingCanvases[firstIndex];\n        canvasEl.dataset[generatedAttribute] = \"false\";\n      } else {\n        canvasEl = document.createElement(\"canvas\");\n        canvasEl.dataset[generatedAttribute] = \"true\";\n        domContainer.appendChild(canvasEl);\n      }\n    }\n    if (!canvasEl.style.width) {\n      canvasEl.style.width = \"100%\";\n    }\n    if (!canvasEl.style.height) {\n      canvasEl.style.height = \"100%\";\n    }\n    const {\n        Container\n      } = await import(\"./Container.js\"),\n      newItem = new Container(this, id, currentOptions);\n    if (oldIndex >= minIndex) {\n      const deleteCount = 0;\n      dom.splice(oldIndex, deleteCount, newItem);\n    } else {\n      dom.push(newItem);\n    }\n    newItem.canvas.loadCanvas(canvasEl);\n    await newItem.start();\n    return newItem;\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  loadParticlesOptions(container, options, ...sourceOptions) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    for (const updater of updaters) {\n      updater.loadOptions?.(options, ...sourceOptions);\n    }\n  }\n  async refresh(refresh = true) {\n    if (!refresh) {\n      return;\n    }\n    await Promise.all(this.dom().map(t => t.refresh()));\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  setOnClickHandler(callback) {\n    const dom = this.dom();\n    if (!dom.length) {\n      throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n    }\n    for (const domItem of dom) {\n      domItem.addClickHandler(callback);\n    }\n  }\n}","map":{"version":3,"names":["errorPrefix","generatedAttribute","executeOnSingleOrMultiple","getLogger","itemFromSingleOrMultiple","EventDispatcher","getRandom","getItemsFromInitializer","container","map","initializers","force","res","get","Promise","all","values","t","set","getDataFromUrl","data","url","index","fallback","response","fetch","ok","json","error","status","Engine","constructor","_configs","Map","_domArray","_eventDispatcher","_initialized","plugins","_initializers","interactors","movers","updaters","presets","effectDrawers","shapeDrawers","pathGenerators","configs","name","config","version","addConfig","key","dispatchEvent","addEffect","effect","drawer","refresh","type","getEffectDrawer","addEventListener","listener","addInteractor","interactorInitializer","addMover","moverInitializer","addParticleUpdater","updaterInitializer","addPathGenerator","generator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","preset","options","override","getPreset","addShape","shape","getShapeDrawer","clearPlugins","delete","args","dom","domItem","item","destroyed","deleteCount","splice","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","getSupportedEffects","keys","getSupportedShapes","getUpdaters","init","load","params","randomFactor","element","Math","floor","domContainer","document","getElementById","createElement","body","append","currentOptions","oldIndex","findIndex","v","description","minIndex","old","destroy","canvasEl","tagName","toLowerCase","dataset","existingCanvases","getElementsByTagName","length","firstIndex","appendChild","style","width","height","Container","newItem","canvas","loadCanvas","start","loadOptions","sourceOptions","loadParticlesOptions","updater","removeEventListener","setOnClickHandler","callback","Error","addClickHandler"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/node_modules/@tsparticles/engine/browser/Core/Engine.js"],"sourcesContent":["import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = await Promise.all([...initializers.values()].map((t) => t(container)));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return (await response.json());\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return \"3.3.0\";\n    }\n    addConfig(config) {\n        const key = config.key ?? config.name ?? \"default\";\n        this._configs.set(key, config);\n        this._eventDispatcher.dispatchEvent(\"configAdded\", { data: { name: key, config } });\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, (type) => {\n            if (!this.getEffectDrawer(type)) {\n                this.effectDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        if (!this.getPathGenerator(name)) {\n            this.pathGenerators.set(name, generator);\n        }\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        if (override || !this.getPreset(preset)) {\n            this.presets.set(preset, options);\n        }\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, refresh = true) {\n        executeOnSingleOrMultiple(shape, (type) => {\n            if (!this.getShapeDrawer(type)) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            const deleteCount = 1;\n            dom.splice(index, deleteCount);\n            return;\n        }\n        return item;\n    }\n    async getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (plugin.needsPlugin(container.actualOptions)) {\n                res.set(plugin.id, await plugin.getPlugin(container));\n            }\n        }\n        return res;\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    async getInteractors(container, force = false) {\n        return await getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    async getMovers(container, force = false) {\n        return await getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    async getUpdaters(container, force = false) {\n        return await getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(params) {\n        const randomFactor = 10000, id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * randomFactor)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = itemFromSingleOrMultiple(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id.description === id), minIndex = 0;\n        if (oldIndex >= minIndex) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                const deleteCount = 1;\n                dom.splice(oldIndex, deleteCount);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            canvasEl.dataset[generatedAttribute] = \"false\";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                const firstIndex = 0;\n                canvasEl = existingCanvases[firstIndex];\n                canvasEl.dataset[generatedAttribute] = \"false\";\n            }\n            else {\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.dataset[generatedAttribute] = \"true\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = \"100%\";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = \"100%\";\n        }\n        const { Container } = await import(\"./Container.js\"), newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= minIndex) {\n            const deleteCount = 0;\n            dom.splice(oldIndex, deleteCount, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions?.(options, ...sourceOptions);\n        }\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        await Promise.all(this.dom().map((t) => t.refresh()));\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}