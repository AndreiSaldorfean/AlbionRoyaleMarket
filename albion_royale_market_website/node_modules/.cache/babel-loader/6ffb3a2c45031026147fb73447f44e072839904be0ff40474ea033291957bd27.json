{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n  draw(data) {\n    drawText(data);\n  }\n  async init(container) {\n    const options = container.actualOptions;\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t),\n        promises = [];\n      executeOnSingleOrMultiple(shapeOptions, shape => {\n        promises.push(loadFont(shape.font, shape.weight));\n      });\n      await Promise.all(promises);\n    }\n  }\n  particleInit(container, particle) {\n    if (!particle.shape || !validTypes.includes(particle.shape)) {\n      return;\n    }\n    const character = particle.shapeData;\n    if (character === undefined) {\n      return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n      return;\n    }\n    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","itemFromSingleOrMultiple","loadFont","drawText","validTypes","TextDrawer","draw","data","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","push","font","weight","Promise","all","particleInit","particle","includes","character","shapeData","undefined","textData","value","text","randomIndexData"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/node_modules/@tsparticles/shape-text/browser/TextDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,EAAEC,SAAS,EAAEC,wBAAwB,EAAEC,QAAQ,QAAS,qBAAqB;AAC/G,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAO,MAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,gBAAgB,CAAC;AACzE,OAAO,MAAMC,UAAU,CAAC;EACpBC,IAAIA,CAACC,IAAI,EAAE;IACPJ,QAAQ,CAACI,IAAI,CAAC;EAClB;EACA,MAAMC,IAAIA,CAACC,SAAS,EAAE;IAClB,MAAMC,OAAO,GAAGD,SAAS,CAACE,aAAa;IACvC,IAAIP,UAAU,CAACQ,IAAI,CAAEC,CAAC,IAAKb,SAAS,CAACa,CAAC,EAAEH,OAAO,CAACI,SAAS,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;MACpE,MAAMC,YAAY,GAAGb,UAAU,CAC1Bc,GAAG,CAAEL,CAAC,IAAKH,OAAO,CAACI,SAAS,CAACC,KAAK,CAACL,OAAO,CAACG,CAAC,CAAC,CAAC,CAC9CD,IAAI,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;QAAEM,QAAQ,GAAG,EAAE;MACpCpB,yBAAyB,CAACkB,YAAY,EAAGF,KAAK,IAAK;QAC/CI,QAAQ,CAACC,IAAI,CAAClB,QAAQ,CAACa,KAAK,CAACM,IAAI,EAAEN,KAAK,CAACO,MAAM,CAAC,CAAC;MACrD,CAAC,CAAC;MACF,MAAMC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;IAC/B;EACJ;EACAM,YAAYA,CAAChB,SAAS,EAAEiB,QAAQ,EAAE;IAC9B,IAAI,CAACA,QAAQ,CAACX,KAAK,IAAI,CAACX,UAAU,CAACuB,QAAQ,CAACD,QAAQ,CAACX,KAAK,CAAC,EAAE;MACzD;IACJ;IACA,MAAMa,SAAS,GAAGF,QAAQ,CAACG,SAAS;IACpC,IAAID,SAAS,KAAKE,SAAS,EAAE;MACzB;IACJ;IACA,MAAMC,QAAQ,GAAGH,SAAS,CAACI,KAAK;IAChC,IAAID,QAAQ,KAAKD,SAAS,EAAE;MACxB;IACJ;IACAJ,QAAQ,CAACO,IAAI,GAAGhC,wBAAwB,CAAC8B,QAAQ,EAAEL,QAAQ,CAACQ,eAAe,CAAC;EAChF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}