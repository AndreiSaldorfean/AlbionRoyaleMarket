{"ast":null,"code":"import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport { trackStream } from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport progressEventReducer from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\nconst fetchProgressDecorator = (total, fn) => {\n  const lengthComputable = total != null;\n  return loaded => setTimeout(() => fn({\n    lengthComputable,\n    total,\n    loaded\n  }));\n};\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? (encoder => str => encoder.encode(str))(new TextEncoder()) : async str => new Uint8Array(await new Response(str).arrayBuffer()));\nconst supportsRequestStream = isReadableStreamSupported && (() => {\n  let duplexAccessed = false;\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    }\n  }).headers.has('Content-Type');\n  return duplexAccessed && !hasContentType;\n})();\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst supportsResponseStream = isReadableStreamSupported && !!(() => {\n  try {\n    return utils.isReadableStream(new Response('').body);\n  } catch (err) {\n    // return undefined\n  }\n})();\nconst resolvers = {\n  stream: supportsResponseStream && (res => res.body)\n};\nisFetchSupported && (res => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? res => res[type]() : (_, config) => {\n      throw new AxiosError(\"Response type '\".concat(type, \"' is not supported\"), AxiosError.ERR_NOT_SUPPORT, config);\n    });\n  });\n})(new Response());\nconst getBodyLength = async body => {\n  if (body == null) {\n    return 0;\n  }\n  if (utils.isBlob(body)) {\n    return body.size;\n  }\n  if (utils.isSpecCompliantForm(body)) {\n    return (await new Request(body).arrayBuffer()).byteLength;\n  }\n  if (utils.isArrayBufferView(body)) {\n    return body.byteLength;\n  }\n  if (utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n  if (utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n};\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n  return length == null ? getBodyLength(body) : length;\n};\nexport default isFetchSupported && (async config => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n  let [composedSignal, stopTimeout] = signal || cancelToken || timeout ? composeSignals([signal, cancelToken], timeout) : [];\n  let finished, request;\n  const onFinish = () => {\n    !finished && setTimeout(() => {\n      composedSignal && composedSignal.unsubscribe();\n    });\n    finished = true;\n  };\n  let requestContentLength;\n  try {\n    if (onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n      let contentTypeHeader;\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader);\n      }\n      if (_request.body) {\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(requestContentLength, progressEventReducer(onUploadProgress)), null, encodeText);\n      }\n    }\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'cors' : 'omit';\n    }\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      withCredentials\n    });\n    let response = await fetch(request);\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {\n      const options = {};\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n      response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(responseContentLength, progressEventReducer(onDownloadProgress, true)), isStreamResponse && onFinish, encodeText), options);\n    }\n    responseType = responseType || 'text';\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n    !isStreamResponse && onFinish();\n    stopTimeout && stopTimeout();\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      });\n    });\n  } catch (err) {\n    onFinish();\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request), {\n        cause: err.cause || err\n      });\n    }\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});","map":{"version":3,"names":["platform","utils","AxiosError","composeSignals","trackStream","AxiosHeaders","progressEventReducer","resolveConfig","settle","fetchProgressDecorator","total","fn","lengthComputable","loaded","setTimeout","isFetchSupported","fetch","Request","Response","isReadableStreamSupported","ReadableStream","encodeText","TextEncoder","encoder","str","encode","Uint8Array","arrayBuffer","supportsRequestStream","duplexAccessed","hasContentType","origin","body","method","duplex","headers","has","DEFAULT_CHUNK_SIZE","supportsResponseStream","isReadableStream","err","resolvers","stream","res","forEach","type","isFunction","_","config","concat","ERR_NOT_SUPPORT","getBodyLength","isBlob","size","isSpecCompliantForm","byteLength","isArrayBufferView","isURLSearchParams","isString","resolveBodyLength","length","toFiniteNumber","getContentLength","url","data","signal","cancelToken","timeout","onDownloadProgress","onUploadProgress","responseType","withCredentials","fetchOptions","toLowerCase","composedSignal","stopTimeout","finished","request","onFinish","unsubscribe","requestContentLength","_request","contentTypeHeader","isFormData","get","setContentType","toUpperCase","normalize","toJSON","response","isStreamResponse","options","prop","responseContentLength","responseData","findKey","Promise","resolve","reject","from","status","statusText","name","test","message","Object","assign","ERR_NETWORK","cause","code"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/node_modules/axios/lib/adapters/fetch.js"],"sourcesContent":["import platform from \"../platform/index.js\";\r\nimport utils from \"../utils.js\";\r\nimport AxiosError from \"../core/AxiosError.js\";\r\nimport composeSignals from \"../helpers/composeSignals.js\";\r\nimport {trackStream} from \"../helpers/trackStream.js\";\r\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\r\nimport progressEventReducer from \"../helpers/progressEventReducer.js\";\r\nimport resolveConfig from \"../helpers/resolveConfig.js\";\r\nimport settle from \"../core/settle.js\";\r\n\r\nconst fetchProgressDecorator = (total, fn) => {\r\n  const lengthComputable = total != null;\r\n  return (loaded) => setTimeout(() => fn({\r\n    lengthComputable,\r\n    total,\r\n    loaded\r\n  }));\r\n}\r\n\r\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\r\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\r\n\r\n// used only inside the fetch adapter\r\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\r\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\r\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\r\n);\r\n\r\nconst supportsRequestStream = isReadableStreamSupported && (() => {\r\n  let duplexAccessed = false;\r\n\r\n  const hasContentType = new Request(platform.origin, {\r\n    body: new ReadableStream(),\r\n    method: 'POST',\r\n    get duplex() {\r\n      duplexAccessed = true;\r\n      return 'half';\r\n    },\r\n  }).headers.has('Content-Type');\r\n\r\n  return duplexAccessed && !hasContentType;\r\n})();\r\n\r\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\r\n\r\nconst supportsResponseStream = isReadableStreamSupported && !!(()=> {\r\n  try {\r\n    return utils.isReadableStream(new Response('').body);\r\n  } catch(err) {\r\n    // return undefined\r\n  }\r\n})();\r\n\r\nconst resolvers = {\r\n  stream: supportsResponseStream && ((res) => res.body)\r\n};\r\n\r\nisFetchSupported && (((res) => {\r\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\r\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\r\n      (_, config) => {\r\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\r\n      })\r\n  });\r\n})(new Response));\r\n\r\nconst getBodyLength = async (body) => {\r\n  if (body == null) {\r\n    return 0;\r\n  }\r\n\r\n  if(utils.isBlob(body)) {\r\n    return body.size;\r\n  }\r\n\r\n  if(utils.isSpecCompliantForm(body)) {\r\n    return (await new Request(body).arrayBuffer()).byteLength;\r\n  }\r\n\r\n  if(utils.isArrayBufferView(body)) {\r\n    return body.byteLength;\r\n  }\r\n\r\n  if(utils.isURLSearchParams(body)) {\r\n    body = body + '';\r\n  }\r\n\r\n  if(utils.isString(body)) {\r\n    return (await encodeText(body)).byteLength;\r\n  }\r\n}\r\n\r\nconst resolveBodyLength = async (headers, body) => {\r\n  const length = utils.toFiniteNumber(headers.getContentLength());\r\n\r\n  return length == null ? getBodyLength(body) : length;\r\n}\r\n\r\nexport default isFetchSupported && (async (config) => {\r\n  let {\r\n    url,\r\n    method,\r\n    data,\r\n    signal,\r\n    cancelToken,\r\n    timeout,\r\n    onDownloadProgress,\r\n    onUploadProgress,\r\n    responseType,\r\n    headers,\r\n    withCredentials = 'same-origin',\r\n    fetchOptions\r\n  } = resolveConfig(config);\r\n\r\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\r\n\r\n  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?\r\n    composeSignals([signal, cancelToken], timeout) : [];\r\n\r\n  let finished, request;\r\n\r\n  const onFinish = () => {\r\n    !finished && setTimeout(() => {\r\n      composedSignal && composedSignal.unsubscribe();\r\n    });\r\n\r\n    finished = true;\r\n  }\r\n\r\n  let requestContentLength;\r\n\r\n  try {\r\n    if (\r\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\r\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\r\n    ) {\r\n      let _request = new Request(url, {\r\n        method: 'POST',\r\n        body: data,\r\n        duplex: \"half\"\r\n      });\r\n\r\n      let contentTypeHeader;\r\n\r\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\r\n        headers.setContentType(contentTypeHeader)\r\n      }\r\n\r\n      if (_request.body) {\r\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(\r\n          requestContentLength,\r\n          progressEventReducer(onUploadProgress)\r\n        ), null, encodeText);\r\n      }\r\n    }\r\n\r\n    if (!utils.isString(withCredentials)) {\r\n      withCredentials = withCredentials ? 'cors' : 'omit';\r\n    }\r\n\r\n    request = new Request(url, {\r\n      ...fetchOptions,\r\n      signal: composedSignal,\r\n      method: method.toUpperCase(),\r\n      headers: headers.normalize().toJSON(),\r\n      body: data,\r\n      duplex: \"half\",\r\n      withCredentials\r\n    });\r\n\r\n    let response = await fetch(request);\r\n\r\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\r\n\r\n    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {\r\n      const options = {};\r\n\r\n      ['status', 'statusText', 'headers'].forEach(prop => {\r\n        options[prop] = response[prop];\r\n      });\r\n\r\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\r\n\r\n      response = new Response(\r\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(\r\n          responseContentLength,\r\n          progressEventReducer(onDownloadProgress, true)\r\n        ), isStreamResponse && onFinish, encodeText),\r\n        options\r\n      );\r\n    }\r\n\r\n    responseType = responseType || 'text';\r\n\r\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\r\n\r\n    !isStreamResponse && onFinish();\r\n\r\n    stopTimeout && stopTimeout();\r\n\r\n    return await new Promise((resolve, reject) => {\r\n      settle(resolve, reject, {\r\n        data: responseData,\r\n        headers: AxiosHeaders.from(response.headers),\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        config,\r\n        request\r\n      })\r\n    })\r\n  } catch (err) {\r\n    onFinish();\r\n\r\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\r\n      throw Object.assign(\r\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\r\n        {\r\n          cause: err.cause || err\r\n        }\r\n      )\r\n    }\r\n\r\n    throw AxiosError.from(err, err && err.code, config, request);\r\n  }\r\n});\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}