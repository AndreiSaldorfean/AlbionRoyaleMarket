{"ast":null,"code":"import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0,\n  double = 2,\n  half = 0.5,\n  squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n  const effectData = effectOptions.options[effect];\n  if (!effectData) {\n    return;\n  }\n  return deepExtend({\n    close: effectOptions.close,\n    fill: effectOptions.fill\n  }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n  const shapeData = shapeOptions.options[shape];\n  if (!shapeData) {\n    return;\n  }\n  return deepExtend({\n    close: shapeOptions.close,\n    fill: shapeOptions.fill\n  }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  const diameter = data.radius * double;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n}\nexport class Particle {\n  constructor(engine, container) {\n    this.container = container;\n    this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n      for (const [, plugin] of container.plugins) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n        if (pluginPos) {\n          return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n        }\n      }\n      const canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = this.getRadius(),\n        outModes = this.options.move.outModes,\n        fixHorizontal = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: value => pos.x += value,\n            radius\n          });\n        },\n        fixVertical = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: value => pos.y += value,\n            radius\n          });\n        };\n      fixHorizontal(outModes.left ?? outModes.default);\n      fixHorizontal(outModes.right ?? outModes.default);\n      fixVertical(outModes.top ?? outModes.default);\n      fixVertical(outModes.bottom ?? outModes.default);\n      if (this._checkOverlap(pos, tryCount)) {\n        const increment = 1;\n        return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n      }\n      return pos;\n    };\n    this._calculateVelocity = () => {\n      const baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      const rad = degToRad(getRangeValue(moveOptions.angle.value)),\n        radOffset = degToRad(getRangeValue(moveOptions.angle.offset)),\n        range = {\n          left: radOffset - rad * half,\n          right: radOffset + rad * half\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n      const collisionsOptions = this.options.collisions,\n        radius = this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      const overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      const retries = overlapOptions.retries,\n        minRetries = 0;\n      if (retries >= minRetries && tryCount > retries) {\n        throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n      }\n      return !!this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n    };\n    this._getRollColor = color => {\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      const rollFactor = 1,\n        none = 0,\n        backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor,\n        backSum = this.roll.horizontal ? Math.PI * half : none,\n        rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = position => {\n      const container = this.container,\n        zIndexValue = getRangeValue(this.options.zIndex.value),\n        minZ = 0;\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n      this.initialPosition = this.position.copy();\n      const canvasSize = container.canvas.size,\n        defaultRadius = 0;\n      this.moveCenter = {\n        ...getPosition(this.options.move.center, canvasSize),\n        radius: this.options.move.center.radius ?? defaultRadius,\n        mode: this.options.move.center.mode ?? \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n      this.offset = Vector.origin;\n    };\n    this._engine = engine;\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    const container = this.container,\n      pathGenerator = this.pathGenerator,\n      shapeDrawer = container.shapeDrawers.get(this.shape);\n    shapeDrawer?.particleDestroy?.(this);\n    for (const [, plugin] of container.plugins) {\n      plugin.particleDestroyed?.(this, override);\n    }\n    for (const updater of container.particles.updaters) {\n      updater.particleDestroyed?.(this, override);\n    }\n    pathGenerator?.reset(this);\n    this._engine.dispatchEvent(\"particleDestroyed\", {\n      container: this.container,\n      data: {\n        particle: this\n      }\n    });\n  }\n  draw(delta) {\n    const container = this.container,\n      canvas = container.canvas;\n    for (const [, plugin] of container.plugins) {\n      canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n  }\n  getMass() {\n    return this.getRadius() ** squareExp * Math.PI * half;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    return this.bubble.radius ?? this.size.value;\n  }\n  getStrokeColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n  }\n  init(id, position, overrideOptions, group) {\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.effectClose = true;\n    this.effectFill = true;\n    this.shapeClose = true;\n    this.shapeFill = true;\n    this.pathRotation = false;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      effectType = particlesOptions.effect.type,\n      shapeType = particlesOptions.shape.type,\n      {\n        reduceDuplicates\n      } = particlesOptions;\n    this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const effectOptions = particlesOptions.effect,\n      shapeOptions = particlesOptions.shape;\n    if (overrideOptions) {\n      if (overrideOptions.effect?.type) {\n        const overrideEffectType = overrideOptions.effect.type,\n          effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n        if (effect) {\n          this.effect = effect;\n          effectOptions.load(overrideOptions.effect);\n        }\n      }\n      if (overrideOptions.shape?.type) {\n        const overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n    }\n    this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n    this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    const effectData = this.effectData;\n    if (effectData) {\n      particlesOptions.load(effectData.particles);\n    }\n    const shapeData = this.shapeData;\n    if (shapeData) {\n      particlesOptions.load(shapeData.particles);\n    }\n    const interactivity = new Interactivity(engine, container);\n    interactivity.load(container.actualOptions.interactivity);\n    interactivity.load(particlesOptions.interactivity);\n    this.interactivity = interactivity;\n    this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n    this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n    this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n    this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    container.retina.initParticle(this);\n    this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this._initPosition(position);\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const decayOffset = 1;\n    this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n    const particles = container.particles;\n    particles.setLastZIndex(this.position.z);\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let effectDrawer = container.effectDrawers.get(this.effect);\n    if (!effectDrawer) {\n      effectDrawer = this._engine.getEffectDrawer(this.effect);\n      if (effectDrawer) {\n        container.effectDrawers.set(this.effect, effectDrawer);\n      }\n    }\n    if (effectDrawer?.loadEffect) {\n      effectDrawer.loadEffect(this);\n    }\n    let shapeDrawer = container.shapeDrawers.get(this.shape);\n    if (!shapeDrawer) {\n      shapeDrawer = this._engine.getShapeDrawer(this.shape);\n      if (shapeDrawer) {\n        container.shapeDrawers.set(this.shape, shapeDrawer);\n      }\n    }\n    if (shapeDrawer?.loadShape) {\n      shapeDrawer.loadShape(this);\n    }\n    const sideCountFunc = shapeDrawer?.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of particles.movers) {\n      mover.init?.(this);\n    }\n    effectDrawer?.particleInit?.(container, this);\n    shapeDrawer?.particleInit?.(container, this);\n    for (const [, plugin] of container.plugins) {\n      plugin.particleCreated?.(this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size,\n      position = this.position;\n    return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    for (const updater of this.container.particles.updaters) {\n      updater.reset?.(this);\n    }\n  }\n}","map":{"version":3,"names":["Vector","Vector3d","calcExactPositionOrRandomFromSize","clamp","degToRad","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","randomInRange","setRangeValue","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","errorPrefix","millisecondsToSeconds","getHslFromAnimation","rangeColorToRgb","Interactivity","alterHsl","loadParticlesOptions","defaultRetryCount","double","half","squareExp","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","options","close","fill","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","_calcPosition","position","zIndex","tryCount","plugin","plugins","pluginPos","particlePosition","undefined","create","x","y","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","increment","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","rad","angle","radOffset","offset","range","straight","random","speed","length","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","minRetries","Error","particles","find","particle","_getRollColor","color","roll","backColor","alter","rollFactor","none","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","type","_initPosition","zIndexValue","minZ","zLayers","initialPosition","defaultRadius","moveCenter","center","mode","outType","origin","_engine","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","particleDestroyed","updater","updaters","reset","dispatchEvent","draw","delta","drawParticlePlugin","drawParticle","getFillColor","getMass","z","getStrokeColor","strokeColor","init","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","effectType","shapeType","overrideEffectType","load","overrideShapeType","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","decayOffset","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","effectDrawers","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init?.(this);\n        }\n        effectDrawer?.particleInit?.(container, this);\n        shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}