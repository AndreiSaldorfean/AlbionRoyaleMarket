{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\OneDrive\\\\Desktop\\\\arm\\\\your_app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport Particles from './Particles';\nimport { loadFull } from \"tsparticles\";\nimport logo from \"./logo.svg\";\nimport { loadSlim } from \"@tsparticles/slim\"; // \nimport \"./App.css\";\nimport particlesOptions from \"./particles.json\";\nimport { tsParticles } from \"@tsparticles/engine\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [init, setInit] = useState(false);\n\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    console.log(container);\n  };\n  const options = useMemo(() => {\n    return {\n      particles: {\n        move: {\n          enable: true\n        }\n      }\n    };\n  }, []);\n  if (init) {\n    return /*#__PURE__*/_jsxDEV(Particles, {\n      id: \"tsparticles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(App, \"eB+NWpxmGZSqHQDaTSx/Qv0E/5M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","Particles","loadFull","logo","loadSlim","particlesOptions","tsParticles","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","init","setInit","initParticlesEngine","engine","then","particlesLoaded","container","console","log","options","particles","move","enable","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/src/App.js"],"sourcesContent":["import React, {useEffect, useState,useMemo} from \"react\";\nimport Particles from './Particles';\nimport {loadFull} from \"tsparticles\";\nimport logo from \"./logo.svg\";\nimport { loadSlim } from \"@tsparticles/slim\"; // \nimport \"./App.css\";\nimport particlesOptions from \"./particles.json\";\nimport { tsParticles } from \"@tsparticles/engine\";\n\nconst App = () => {\n    const [init, setInit] = useState(false);\n  \n    // this should be run only once per application lifetime\n    useEffect(() => {\n      initParticlesEngine(async (engine) => {\n        // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n        // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n        // starting from v2 you can add only the features you need reducing the bundle size\n        //await loadAll(engine);\n        //await loadFull(engine);\n        await loadSlim(engine);\n        //await loadBasic(engine);\n      }).then(() => {\n        setInit(true);\n      });\n    }, []);\n  \n    const particlesLoaded = (container) => {\n      console.log(container);\n    };  \n    \n    const  options = useMemo(()=>{\n        return{\n            particles:{\n                move:{\n                    enable:true\n                }\n            }\n        }\n    },[]);\n\n  \n    if (init) {\n      return (\n        <Particles id=\"tsparticles\" />\n      );\n    }\n  \n    return <></>;\n  };\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,EAACC,OAAO,QAAO,OAAO;AACxD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAAQC,QAAQ,QAAO,aAAa;AACpC,OAAOC,IAAI,MAAM,YAAY;AAC7B,SAASC,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;AAC9C,OAAO,WAAW;AAClB,OAAOC,gBAAgB,MAAM,kBAAkB;AAC/C,SAASC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAEvC;EACAD,SAAS,CAAC,MAAM;IACdiB,mBAAmB,CAAC,MAAOC,MAAM,IAAK;MACpC;MACA;MACA;MACA;MACA;MACA,MAAMZ,QAAQ,CAACY,MAAM,CAAC;MACtB;IACF,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACZH,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,eAAe,GAAIC,SAAS,IAAK;IACrCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACxB,CAAC;EAED,MAAOG,OAAO,GAAGtB,OAAO,CAAC,MAAI;IACzB,OAAM;MACFuB,SAAS,EAAC;QACNC,IAAI,EAAC;UACDC,MAAM,EAAC;QACX;MACJ;IACJ,CAAC;EACL,CAAC,EAAC,EAAE,CAAC;EAGL,IAAIZ,IAAI,EAAE;IACR,oBACEL,OAAA,CAACP,SAAS;MAACyB,EAAE,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAElC;EAEA,oBAAOtB,OAAA,CAAAE,SAAA,mBAAI,CAAC;AACd,CAAC;AAACE,EAAA,CAxCED,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAyCT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}