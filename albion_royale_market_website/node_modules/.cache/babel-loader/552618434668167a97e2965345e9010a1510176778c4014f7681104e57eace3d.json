{"ast":null,"code":"import { Mount } from \"./classMount\";\nimport transport_mounts from '../json_input/transport_mounts.json';\nimport mapGraphJson from '../json_input/cities.json';\n\n// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\n\nconst REFINING_BONUS = 1.58;\nconst CRAFTING_BONUS = 1.33;\nconst MARKET_PERCENTAGE = 0.92;\nconst TAX = 0.08;\nconst TAX_HI = 0.12;\nfunction computeTime(playerMount, mapGraph, dict, startingCity) {\n  let totalTime = 0;\n  let currentCity = startingCity;\n  for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  return parseInt(totalTime) + 1;\n}\nfunction computeCarryingCapacity(playerMount, itemWeight) {\n  return parseInt(playerMount.getCarryLoad() / itemWeight);\n}\nfunction getAmount(recipe, investment) {\n  let sum = 0;\n  for (const item in recipe) {\n    const tempAmount = parseInt(recipe[item][1][\"amount\"], 10);\n    sum += tempAmount * parseInt(recipe[item][1][\"price_buy\"], 10);\n  }\n  return investment / sum;\n}\nfunction computeRound(buyList, craftList) {\n  console.log(buyList);\n  console.log(craftList);\n  // const index = buyList.length-1;\n  // const amount = parseInt(buyList[index][1][\"amount\"]);\n  // const craft_price = (amount*nca/REFINING_BONUS)*buyList[index][1][\"price_buy\"];\n  // const market_price = (amount*nca*craftList[index][1][\"price_buy\"]);\n  // if(craft_price > market_price){\n  //     buyList.pop(index);\n  //     craftList[index][1][\"amount\"] = amount*nca;\n  // }else{\n  //     craftList[index][1][\"amount\"] = parseInt(amount*nca/REFINING_BONUS);\n  //     craftList[index][1][\"price_buy\"] = craftList[index][1][\"amount\"]*\n  //                                        parseInt(buyList[index][1][\"price_buy\"])/nca;//price per craft,\n  //                                                                                             //how much it costs to craft one item,\n  //                                                                                             //not profit per crafted item!\n  // }\n}\nfunction computeProfit(item, investment) {\n  let buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\n  let craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\n  const priceSell = parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"] * MARKET_PERCENTAGE);\n  if (craftingList == undefined) return -1;\n  const nca = parseInt(getAmount(buyingList, investment));\n  let gca = nca * REFINING_BONUS;\n  let quantity = 0;\n  let initCost = 0;\n  if (craftingList[0][0] == buyingList[0][0]) {\n    buyingList.pop(0);\n  }\n  let subNca = nca;\n  for (let i = 0; i <= craftingList.length - 1; i++) {\n    craftingList[i][1][\"amount\"] = subNca;\n    subNca = parseFloat(subNca / REFINING_BONUS);\n  }\n  subNca = nca;\n  for (let i = 0; i <= buyingList.length - 1; i++) {\n    buyingList[i][1][\"amount\"] = parseInt(buyingList[i][1][\"amount\"]) * subNca;\n    subNca = parseFloat(subNca / REFINING_BONUS);\n  }\n\n  //Init\n  {\n    const index = buyingList.length - 1;\n    const amount = parseInt(buyingList[index][1][\"amount\"]);\n    const craft_price = amount * nca / REFINING_BONUS * buyingList[index][1][\"price_buy\"];\n    const market_price = amount * nca * craftingList[index][1][\"price_buy\"];\n    if (craft_price > market_price) {\n      buyingList.pop(index);\n      craftingList[index][1][\"amount\"] = amount * nca;\n    } else {\n      craftingList[index][1][\"amount\"] = parseInt(amount * nca / REFINING_BONUS);\n      craftingList[index][1][\"price_buy\"] = craftingList[index][1][\"amount\"] * parseInt(buyingList[index][1][\"price_buy\"]) / nca; //price per craft,\n      //how much it costs to craft one item,\n      //not profit per crafted item!\n    }\n  }\n  for (let i = buyingList.length - 1; i >= 0; i--) {\n    // console.log(craftingList);\n    // console.log(buyingList);\n    // console.log(j);\n    // console.log(craftingList[j][1]);\n    // console.log(buyingList);\n    // console.log(buyingList[j]);\n    // console.log(buyingList[j][1]);\n\n    // let amount_m1 = craftingList[i+1][1][\"amount\"];  \n    // let ppc_m1    = craftingList[i+1][1][\"price_buy\"];\n    // //console.log(ppc_m1);\n    // initCost += ppc_m1*amount_m1;\n    // initCost += buyingList[j][1][\"price_buy\"]*buyingList[j][1][\"amount\"]*nca;\n    console.log(computeRound(buyingList[i], craftingList[i]));\n  }\n\n  //console.log(initCost);\n  const gain = priceSell * gca;\n  //console.log(priceSell);\n  //console.log(gain);\n  let profit = gain - initCost;\n  //console.log(profit);\n  return gain - initCost;\n}\nfunction computeRoi(investment, profit) {\n  return parseInt(profit / investment * 100);\n}\nfunction formatNumber(num) {\n  let string = \"\";\n  if (num > 1000000000) {\n    string = (num / 1000000000).toFixed(2) + \"b\";\n  } else if (num > 1000000) {\n    string = (num / 1000000).toFixed(2) + \"m\";\n  } else if (num > 1000) {\n    string = (num / 1000).toFixed(2) + \"k\";\n  }\n  return string;\n}\nfunction final_json(p_items, site_input) {\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  p_items.map(item => {\n    item[1][\"time\"] = computeTime(mountObj, mapGraphJson, item[1], site_input[\"current_city\"]);\n    item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n    item[1][\"profit\"] = computeProfit(item[1], site_input[\"investment\"]);\n    console.log(item[1][\"profit\"]);\n    // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\n    item[1][\"roi\"] = 0;\n  });\n  return p_items;\n}\nfunction compute_item(item) {\n  let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  item[\"time\"] = computeTime(mountObj, mapGraphJson, item, site_input[\"current_city\"]);\n  item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n  item[\"profit\"] = computeProfit(item, site_input[\"investment\"]);\n  item[\"roi\"] = computeRoi(site_input[\"investment\"], item[\"profit\"]);\n  return item;\n}\nexport { final_json, compute_item };","map":{"version":3,"names":["Mount","transport_mounts","mapGraphJson","REFINING_BONUS","CRAFTING_BONUS","MARKET_PERCENTAGE","TAX","TAX_HI","computeTime","playerMount","mapGraph","dict","startingCity","totalTime","currentCity","item","Object","entries","cityTravelTime","parseInt","computeCarryingCapacity","itemWeight","getCarryLoad","getAmount","recipe","investment","sum","tempAmount","computeRound","buyList","craftList","console","log","computeProfit","buyingList","craftingList","priceSell","undefined","nca","gca","quantity","initCost","pop","subNca","i","length","parseFloat","index","amount","craft_price","market_price","gain","profit","computeRoi","formatNumber","num","string","toFixed","final_json","p_items","site_input","mount","mountObj","map","compute_item","JSON","parse","localStorage","getItem"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\nimport mapGraphJson from '../json_input/cities.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nconst REFINING_BONUS=1.58\r\nconst CRAFTING_BONUS=1.33\r\nconst MARKET_PERCENTAGE=0.92 \r\nconst TAX =0.08\r\nconst TAX_HI =0.12\r\n\r\nfunction computeTime(playerMount,mapGraph, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction getAmount(recipe,investment){\r\n    let sum = 0;\r\n    for(const item in recipe){\r\n        const tempAmount =parseInt(recipe[item][1][\"amount\"],10);\r\n        sum +=tempAmount*parseInt(recipe[item][1][\"price_buy\"],10);\r\n    }\r\n    return investment/sum;\r\n}\r\n\r\nfunction computeRound(buyList,craftList){\r\n    console.log(buyList);\r\n    console.log(craftList);\r\n    // const index = buyList.length-1;\r\n    // const amount = parseInt(buyList[index][1][\"amount\"]);\r\n    // const craft_price = (amount*nca/REFINING_BONUS)*buyList[index][1][\"price_buy\"];\r\n    // const market_price = (amount*nca*craftList[index][1][\"price_buy\"]);\r\n    // if(craft_price > market_price){\r\n    //     buyList.pop(index);\r\n    //     craftList[index][1][\"amount\"] = amount*nca;\r\n    // }else{\r\n    //     craftList[index][1][\"amount\"] = parseInt(amount*nca/REFINING_BONUS);\r\n    //     craftList[index][1][\"price_buy\"] = craftList[index][1][\"amount\"]*\r\n    //                                        parseInt(buyList[index][1][\"price_buy\"])/nca;//price per craft,\r\n    //                                                                                             //how much it costs to craft one item,\r\n    //                                                                                             //not profit per crafted item!\r\n    // }\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    let buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\r\n    let craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\r\n    const priceSell = parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"] * MARKET_PERCENTAGE);\r\n    if(craftingList == undefined)return -1;\r\n    const nca = parseInt(getAmount(buyingList,investment));\r\n    let gca = nca*REFINING_BONUS;\r\n    let quantity = 0;\r\n    let initCost = 0;\r\n\r\n    if(craftingList[0][0] == buyingList[0][0]){\r\n        buyingList.pop(0);\r\n    }\r\n\r\n    let subNca = nca;\r\n    for (let i = 0; i<=craftingList.length-1;i++) {\r\n        craftingList[i][1][\"amount\"] = subNca;\r\n        subNca = parseFloat(subNca/REFINING_BONUS);\r\n    }\r\n    subNca = nca;\r\n    for (let i = 0; i<=buyingList.length-1;i++) {\r\n        buyingList[i][1][\"amount\"] = parseInt(buyingList[i][1][\"amount\"])*subNca;\r\n        subNca = parseFloat(subNca/REFINING_BONUS);\r\n    }\r\n\r\n    //Init\r\n    {\r\n        const index = buyingList.length-1;\r\n        const amount = parseInt(buyingList[index][1][\"amount\"]);\r\n        const craft_price = (amount*nca/REFINING_BONUS)*buyingList[index][1][\"price_buy\"];\r\n        const market_price = (amount*nca*craftingList[index][1][\"price_buy\"]);\r\n        if(craft_price > market_price){\r\n            buyingList.pop(index);\r\n            craftingList[index][1][\"amount\"] = amount*nca;\r\n        }else{\r\n            craftingList[index][1][\"amount\"] = parseInt(amount*nca/REFINING_BONUS);\r\n            craftingList[index][1][\"price_buy\"] = craftingList[index][1][\"amount\"]*\r\n                                                  parseInt(buyingList[index][1][\"price_buy\"])/nca;//price per craft,\r\n                                                                                                  //how much it costs to craft one item,\r\n                                                                                                  //not profit per crafted item!\r\n        }\r\n    }\r\n\r\n    for (let i = buyingList.length - 1; i>=0;i--) {\r\n        // console.log(craftingList);\r\n        // console.log(buyingList);\r\n        // console.log(j);\r\n        // console.log(craftingList[j][1]);\r\n        // console.log(buyingList);\r\n        // console.log(buyingList[j]);\r\n        // console.log(buyingList[j][1]);\r\n\r\n        // let amount_m1 = craftingList[i+1][1][\"amount\"];  \r\n        // let ppc_m1    = craftingList[i+1][1][\"price_buy\"];\r\n        // //console.log(ppc_m1);\r\n        // initCost += ppc_m1*amount_m1;\r\n        // initCost += buyingList[j][1][\"price_buy\"]*buyingList[j][1][\"amount\"]*nca;\r\n        console.log(computeRound(buyingList[i],craftingList[i]));\r\n    }\r\n\r\n    //console.log(initCost);\r\n    const gain = priceSell *gca;\r\n    //console.log(priceSell);\r\n    //console.log(gain);\r\n    let profit = gain-initCost;\r\n    //console.log(profit);\r\n    return gain - initCost;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    p_items.map((item)=>{\r\n        item[1][\"time\"]             = computeTime(mountObj,\r\n                                        mapGraphJson,\r\n                                        item[1],\r\n                                        site_input[\"current_city\"]);\r\n        item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        item[1][\"profit\"]           = computeProfit(item[1],site_input[\"investment\"]);\r\n        console.log(item[1][\"profit\"]);\r\n        // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n        item[1][\"roi\"]               = 0;\r\n    })\r\n    return p_items;\r\n}\r\n\r\nfunction compute_item(item){\r\n    let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    \r\n    \r\n    item[\"time\"]              = computeTime(mountObj,\r\n                                mapGraphJson,\r\n                                item,\r\n                                site_input[\"current_city\"]);\r\n\r\n    item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n    item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n    item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n    return item;    \r\n}\r\n\r\nexport {final_json, compute_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}