{"ast":null,"code":"import { Mount } from \"./classMount\";\nimport transport_mounts from '../json_input/transport_mounts.json';\nimport mapGraphJson from '../json_input/cities.json';\n\n// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\n\nfunction buySum(buyingList) {\n  let sum = 0;\n  for (const itemIndex of buyingList) {\n    if (parseInt(itemIndex[1][\"price_buy\"]) > 0) {\n      sum += parseInt(itemIndex[1][\"price_buy\"]) * parseInt(itemIndex[1][\"price_buy\"]);\n    }\n  }\n  return sum;\n}\nconst REFINING_BONUS = 1.58;\nconst CRAFTING_BONUS = 1.33;\nconst MARKET_PERCENTAGE = 0.92;\nfunction computeTime(playerMount, mapGraph, dict, startingCity) {\n  let totalTime = 0;\n  let currentCity = startingCity;\n  for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  return parseInt(totalTime) + 1;\n}\nfunction computeCarryingCapacity(playerMount, itemWeight) {\n  return parseInt(playerMount.getCarryLoad() / itemWeight);\n}\nfunction computeProfit(item, investment) {\n  const buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\n  const craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\n  const priceSell = item[\"price_sell\"];\n  if (craftingList == undefined) return -1;\n  let quantity = 0;\n  let totalCost = buySum(buyingList); // for items which are bought\n  console.log(totalCost);\n  for (const ket in craftingList) {\n    if (craftingList[1][i][0] === item[\"id\"]) {\n      quantity = craftingList[i][3];\n      totalCost += craftingList[i][5];\n    }\n  }\n  const gain = priceSell * quantity * MARKET_PERCENTAGE;\n  return gain - totalCost;\n}\nfunction computeRoi(investment, profit) {\n  return parseInt(profit / investment * 100);\n}\nfunction formatNumber(num) {\n  let string = \"\";\n  if (num > 1000000000) {\n    string = (num / 1000000000).toFixed(2) + \"b\";\n  } else if (num > 1000000) {\n    string = (num / 1000000).toFixed(2) + \"m\";\n  } else if (num > 1000) {\n    string = (num / 1000).toFixed(2) + \"k\";\n  }\n  return string;\n}\nfunction final_json(p_items, site_input) {\n  var arr = Object.entries(p_items);\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  arr.map(item => {\n    item[1][\"time\"] = computeTime(mountObj, mapGraphJson, item[1], site_input[\"current_city\"]);\n    item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n    // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\n    item[1][\"profit\"] = 0;\n    // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\n    item[1][\"roi\"] = 0;\n  });\n  return arr;\n}\nfunction get_ppc(investment, ceva) {}\nfunction compute_item(item) {\n  let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  item[\"time\"] = computeTime(mountObj, mapGraphJson, item, site_input[\"current_city\"]);\n  item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n  item[\"profit\"] = computeProfit(item, site_input[\"investment\"]);\n  console.log(item[\"profit\"]);\n  item[\"roi\"] = computeRoi(site_input[\"investment\"], item[\"profit\"]);\n  return item;\n}\nexport { final_json, compute_item };","map":{"version":3,"names":["Mount","transport_mounts","mapGraphJson","buySum","buyingList","sum","itemIndex","parseInt","REFINING_BONUS","CRAFTING_BONUS","MARKET_PERCENTAGE","computeTime","playerMount","mapGraph","dict","startingCity","totalTime","currentCity","item","Object","entries","cityTravelTime","computeCarryingCapacity","itemWeight","getCarryLoad","computeProfit","investment","craftingList","priceSell","undefined","quantity","totalCost","console","log","ket","i","gain","computeRoi","profit","formatNumber","num","string","toFixed","final_json","p_items","site_input","arr","mount","mountObj","map","get_ppc","ceva","compute_item","JSON","parse","localStorage","getItem"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\nimport mapGraphJson from '../json_input/cities.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nfunction buySum(buyingList) {\r\n    let sum = 0;\r\n    for (const itemIndex of buyingList) {\r\n        if (parseInt(itemIndex[1][\"price_buy\"]) > 0) {\r\n            sum += parseInt(itemIndex[1][\"price_buy\"]) * parseInt(itemIndex[1][\"price_buy\"]);\r\n        }\r\n    }\r\n    return sum;\r\n}\r\nconst REFINING_BONUS=1.58\r\nconst CRAFTING_BONUS=1.33\r\nconst MARKET_PERCENTAGE=0.92 \r\n\r\nfunction computeTime(playerMount,mapGraph, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    const buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\r\n    const craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\r\n    const priceSell = item[\"price_sell\"];\r\n    if(craftingList == undefined)return -1;\r\n\r\n    let quantity = 0;\r\n    let totalCost = buySum(buyingList); // for items which are bought\r\n    console.log(totalCost)\r\n    for (const ket in craftingList) {\r\n        if (craftingList[1][i][0] === item[\"id\"]) {\r\n            quantity = craftingList[i][3];\r\n            totalCost += craftingList[i][5];\r\n        }\r\n    }\r\n    const gain = priceSell * quantity * MARKET_PERCENTAGE;\r\n    return gain - totalCost;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var arr = Object.entries(p_items);\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n\r\n    arr.map((item)=>{\r\n        item[1][\"time\"]              = computeTime(mountObj,\r\n                                    mapGraphJson,\r\n                                    item[1],\r\n                                    site_input[\"current_city\"]);\r\n        item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\r\n        item[1][\"profit\"]            = 0;\r\n        // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n        item[1][\"roi\"]               = 0;\r\n    })\r\n    return arr;\r\n}\r\n\r\nfunction get_ppc(investment,ceva){\r\n\r\n}\r\n\r\nfunction compute_item(item){\r\n    let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    \r\n    \r\n    item[\"time\"]              = computeTime(mountObj,\r\n                                mapGraphJson,\r\n                                item,\r\n                                site_input[\"current_city\"]);\r\n\r\n    item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n    item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n    console.log(item[\"profit\"]);\r\n    item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n    return item;\r\n}\r\n\r\nexport {final_json, compute_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}