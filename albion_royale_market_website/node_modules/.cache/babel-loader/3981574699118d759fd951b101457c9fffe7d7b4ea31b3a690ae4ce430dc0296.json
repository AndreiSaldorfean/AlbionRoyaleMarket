{"ast":null,"code":"import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n  if (engine.loadImage) {\n    return;\n  }\n  engine.loadImage = async data => {\n    if (!data.name && !data.src) {\n      throw new Error(`${errorPrefix} no image source provided`);\n    }\n    if (!engine.images) {\n      engine.images = [];\n    }\n    if (engine.images.find(t => t.name === data.name || t.source === data.src)) {\n      return;\n    }\n    try {\n      const image = {\n        gif: data.gif ?? false,\n        name: data.name ?? data.src,\n        source: data.src,\n        type: data.src.substring(data.src.length - extLength),\n        error: false,\n        loading: true,\n        replaceColor: data.replaceColor,\n        ratio: data.width && data.height ? data.width / data.height : undefined\n      };\n      engine.images.push(image);\n      let imageFunc;\n      if (data.gif) {\n        const {\n          loadGifImage\n        } = await import(\"./GifUtils/Utils.js\");\n        imageFunc = loadGifImage;\n      } else {\n        imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n      }\n      await imageFunc(image);\n    } catch {\n      throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n    }\n  };\n}\nexport async function loadImageShape(engine, refresh = true) {\n  addLoadImageToEngine(engine);\n  const {\n      ImagePreloaderPlugin\n    } = await import(\"./ImagePreloader.js\"),\n    {\n      ImageDrawer\n    } = await import(\"./ImageDrawer.js\");\n  const preloader = new ImagePreloaderPlugin(engine);\n  await engine.addPlugin(preloader, refresh);\n  await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}","map":{"version":3,"names":["downloadSvgImage","loadImage","errorPrefix","extLength","addLoadImageToEngine","engine","data","name","src","Error","images","find","t","source","image","gif","type","substring","length","error","loading","replaceColor","ratio","width","height","undefined","push","imageFunc","loadGifImage","loadImageShape","refresh","ImagePreloaderPlugin","ImageDrawer","preloader","addPlugin","addShape"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/node_modules/@tsparticles/shape-image/browser/index.js"],"sourcesContent":["import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                const { loadGifImage } = await import(\"./GifUtils/Utils.js\");\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const { ImagePreloaderPlugin } = await import(\"./ImagePreloader.js\"), { ImageDrawer } = await import(\"./ImageDrawer.js\");\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,SAAS,QAAQ,YAAY;AACxD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,MAAMC,SAAS,GAAG,CAAC;AACnB,SAASC,oBAAoBA,CAACC,MAAM,EAAE;EAClC,IAAIA,MAAM,CAACJ,SAAS,EAAE;IAClB;EACJ;EACAI,MAAM,CAACJ,SAAS,GAAG,MAAOK,IAAI,IAAK;IAC/B,IAAI,CAACA,IAAI,CAACC,IAAI,IAAI,CAACD,IAAI,CAACE,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAE,GAAEP,WAAY,2BAA0B,CAAC;IAC9D;IACA,IAAI,CAACG,MAAM,CAACK,MAAM,EAAE;MAChBL,MAAM,CAACK,MAAM,GAAG,EAAE;IACtB;IACA,IAAIL,MAAM,CAACK,MAAM,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACL,IAAI,KAAKD,IAAI,CAACC,IAAI,IAAIK,CAAC,CAACC,MAAM,KAAKP,IAAI,CAACE,GAAG,CAAC,EAAE;MAC1E;IACJ;IACA,IAAI;MACA,MAAMM,KAAK,GAAG;QACVC,GAAG,EAAET,IAAI,CAACS,GAAG,IAAI,KAAK;QACtBR,IAAI,EAAED,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,GAAG;QAC3BK,MAAM,EAAEP,IAAI,CAACE,GAAG;QAChBQ,IAAI,EAAEV,IAAI,CAACE,GAAG,CAACS,SAAS,CAACX,IAAI,CAACE,GAAG,CAACU,MAAM,GAAGf,SAAS,CAAC;QACrDgB,KAAK,EAAE,KAAK;QACZC,OAAO,EAAE,IAAI;QACbC,YAAY,EAAEf,IAAI,CAACe,YAAY;QAC/BC,KAAK,EAAEhB,IAAI,CAACiB,KAAK,IAAIjB,IAAI,CAACkB,MAAM,GAAGlB,IAAI,CAACiB,KAAK,GAAGjB,IAAI,CAACkB,MAAM,GAAGC;MAClE,CAAC;MACDpB,MAAM,CAACK,MAAM,CAACgB,IAAI,CAACZ,KAAK,CAAC;MACzB,IAAIa,SAAS;MACb,IAAIrB,IAAI,CAACS,GAAG,EAAE;QACV,MAAM;UAAEa;QAAa,CAAC,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC;QAC5DD,SAAS,GAAGC,YAAY;MAC5B,CAAC,MACI;QACDD,SAAS,GAAGrB,IAAI,CAACe,YAAY,GAAGrB,gBAAgB,GAAGC,SAAS;MAChE;MACA,MAAM0B,SAAS,CAACb,KAAK,CAAC;IAC1B,CAAC,CACD,MAAM;MACF,MAAM,IAAIL,KAAK,CAAE,GAAEP,WAAY,IAAGI,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,GAAI,YAAW,CAAC;IACxE;EACJ,CAAC;AACL;AACA,OAAO,eAAeqB,cAAcA,CAACxB,MAAM,EAAEyB,OAAO,GAAG,IAAI,EAAE;EACzD1B,oBAAoB,CAACC,MAAM,CAAC;EAC5B,MAAM;MAAE0B;IAAqB,CAAC,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC;IAAE;MAAEC;IAAY,CAAC,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC;EACxH,MAAMC,SAAS,GAAG,IAAIF,oBAAoB,CAAC1B,MAAM,CAAC;EAClD,MAAMA,MAAM,CAAC6B,SAAS,CAACD,SAAS,EAAEH,OAAO,CAAC;EAC1C,MAAMzB,MAAM,CAAC8B,QAAQ,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,IAAIH,WAAW,CAAC3B,MAAM,CAAC,EAAEyB,OAAO,CAAC;AAChF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}