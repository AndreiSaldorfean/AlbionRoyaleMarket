{"ast":null,"code":"const DEFAULT_SPEED=5.5;const MEAN_DISTANCE=913.2;class Mount{constructor(delay,moveBonus,gallopBonus,carryLoad){this.mountDelay=delay;this.moveBonus=moveBonus;this.gallopBonus=gallopBonus;this.carryLoad=carryLoad;}travelTime(){// The estimated value shall be only an estimation\nconst speed0=DEFAULT_SPEED+DEFAULT_SPEED*this.moveBonus;const speed1=DEFAULT_SPEED+DEFAULT_SPEED*this.gallopBonus;const timeFinal=(MEAN_DISTANCE-this.mountDelay*speed0)/speed1+this.mountDelay;return timeFinal/60;// converting to minutes\n}cityTravelTime(map,startCity,destinationCity){const tileTime=this.travelTime();if(map[startCity][\"NeighbouringCities\"].hasOwnProperty(destinationCity)){return tileTime*map[startCity][\"NeighbouringCities\"][destinationCity];}else{let minDistance=1000;const neighbouringCities=map[startCity][\"NeighbouringCities\"];let distanceFromStart=0;for(const index in neighbouringCities){const temp=neighbouringCities[index];if(map[index][\"NeighbouringCities\"].hasOwnProperty(destinationCity)&&minDistance>map[index][\"NeighbouringCities\"][destinationCity]+temp){minDistance=map[index][\"NeighbouringCities\"][destinationCity];distanceFromStart=map[startCity][\"NeighbouringCities\"][index];}}minDistance+=distanceFromStart;return tileTime*minDistance;}}getCarryLoad(){return this.carryLoad;}}export{Mount};","map":{"version":3,"names":["DEFAULT_SPEED","MEAN_DISTANCE","Mount","constructor","delay","moveBonus","gallopBonus","carryLoad","mountDelay","travelTime","speed0","speed1","timeFinal","cityTravelTime","map","startCity","destinationCity","tileTime","hasOwnProperty","minDistance","neighbouringCities","distanceFromStart","index","temp","getCarryLoad"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/classMount.js"],"sourcesContent":["const DEFAULT_SPEED = 5.5;\r\nconst MEAN_DISTANCE = 913.2;\r\n\r\nclass Mount {\r\n    constructor(delay, moveBonus, gallopBonus, carryLoad) {\r\n        this.mountDelay = delay;\r\n        this.moveBonus = moveBonus;\r\n        this.gallopBonus = gallopBonus;\r\n        this.carryLoad = carryLoad;\r\n    }\r\n\r\n    travelTime() {\r\n        // The estimated value shall be only an estimation\r\n        const speed0 = DEFAULT_SPEED + DEFAULT_SPEED * this.moveBonus;\r\n        const speed1 = DEFAULT_SPEED + DEFAULT_SPEED * this.gallopBonus;\r\n        const timeFinal = (MEAN_DISTANCE - this.mountDelay * speed0) / speed1 + this.mountDelay;\r\n        return timeFinal / 60; // converting to minutes\r\n    }\r\n\r\n    cityTravelTime(map, startCity, destinationCity) {\r\n        const tileTime = this.travelTime();\r\n        if (map[startCity][\"NeighbouringCities\"].hasOwnProperty(destinationCity)) {\r\n            return tileTime * map[startCity][\"NeighbouringCities\"][destinationCity];\r\n        } else {\r\n            let minDistance = 1000;\r\n            const neighbouringCities = map[startCity][\"NeighbouringCities\"];\r\n            let distanceFromStart = 0;\r\n            for (const index in neighbouringCities) {\r\n                const temp = neighbouringCities[index];\r\n                if (map[index][\"NeighbouringCities\"].hasOwnProperty(destinationCity) &&\r\n                    minDistance > map[index][\"NeighbouringCities\"][destinationCity] + temp) {\r\n                    minDistance = map[index][\"NeighbouringCities\"][destinationCity];\r\n                    distanceFromStart = map[startCity][\"NeighbouringCities\"][index];\r\n                }\r\n            }\r\n            minDistance += distanceFromStart;\r\n            return tileTime * minDistance;\r\n        }\r\n    }\r\n\r\n    getCarryLoad() {\r\n        return this.carryLoad;\r\n    }\r\n}\r\nexport {Mount};"],"mappings":"AAAA,KAAM,CAAAA,aAAa,CAAG,GAAG,CACzB,KAAM,CAAAC,aAAa,CAAG,KAAK,CAE3B,KAAM,CAAAC,KAAM,CACRC,WAAWA,CAACC,KAAK,CAAEC,SAAS,CAAEC,WAAW,CAAEC,SAAS,CAAE,CAClD,IAAI,CAACC,UAAU,CAAGJ,KAAK,CACvB,IAAI,CAACC,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAACC,WAAW,CAAGA,WAAW,CAC9B,IAAI,CAACC,SAAS,CAAGA,SAAS,CAC9B,CAEAE,UAAUA,CAAA,CAAG,CACT;AACA,KAAM,CAAAC,MAAM,CAAGV,aAAa,CAAGA,aAAa,CAAG,IAAI,CAACK,SAAS,CAC7D,KAAM,CAAAM,MAAM,CAAGX,aAAa,CAAGA,aAAa,CAAG,IAAI,CAACM,WAAW,CAC/D,KAAM,CAAAM,SAAS,CAAG,CAACX,aAAa,CAAG,IAAI,CAACO,UAAU,CAAGE,MAAM,EAAIC,MAAM,CAAG,IAAI,CAACH,UAAU,CACvF,MAAO,CAAAI,SAAS,CAAG,EAAE,CAAE;AAC3B,CAEAC,cAAcA,CAACC,GAAG,CAAEC,SAAS,CAAEC,eAAe,CAAE,CAC5C,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAACR,UAAU,CAAC,CAAC,CAClC,GAAIK,GAAG,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC,CAACG,cAAc,CAACF,eAAe,CAAC,CAAE,CACtE,MAAO,CAAAC,QAAQ,CAAGH,GAAG,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC,CAACC,eAAe,CAAC,CAC3E,CAAC,IAAM,CACH,GAAI,CAAAG,WAAW,CAAG,IAAI,CACtB,KAAM,CAAAC,kBAAkB,CAAGN,GAAG,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC,CAC/D,GAAI,CAAAM,iBAAiB,CAAG,CAAC,CACzB,IAAK,KAAM,CAAAC,KAAK,GAAI,CAAAF,kBAAkB,CAAE,CACpC,KAAM,CAAAG,IAAI,CAAGH,kBAAkB,CAACE,KAAK,CAAC,CACtC,GAAIR,GAAG,CAACQ,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAACJ,cAAc,CAACF,eAAe,CAAC,EAChEG,WAAW,CAAGL,GAAG,CAACQ,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAACN,eAAe,CAAC,CAAGO,IAAI,CAAE,CACxEJ,WAAW,CAAGL,GAAG,CAACQ,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAACN,eAAe,CAAC,CAC/DK,iBAAiB,CAAGP,GAAG,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC,CAACO,KAAK,CAAC,CACnE,CACJ,CACAH,WAAW,EAAIE,iBAAiB,CAChC,MAAO,CAAAJ,QAAQ,CAAGE,WAAW,CACjC,CACJ,CAEAK,YAAYA,CAAA,CAAG,CACX,MAAO,KAAI,CAACjB,SAAS,CACzB,CACJ,CACA,OAAQL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}