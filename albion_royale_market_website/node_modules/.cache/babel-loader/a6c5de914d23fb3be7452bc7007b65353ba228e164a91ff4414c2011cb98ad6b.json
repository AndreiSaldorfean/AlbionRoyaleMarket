{"ast":null,"code":"import { Mount } from \"./classMount\";\nimport transport_mounts from '../json_input/transport_mounts.json';\nimport mapGraphJson from '../json_input/cities.json';\n\n// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\n\nfunction buySum(buyingList) {\n  let sum = 0;\n  for (const itemIndex of buyingList) {\n    if (parseInt(itemIndex[3]) > 0) {\n      sum += parseInt(itemIndex[3]) * parseInt(itemIndex[4]);\n    }\n  }\n  return sum;\n}\nconst REFINING_BONUS = 1.58;\nconst CRAFTING_BONUS = 1.33;\nconst MARKET_PERCENTAGE = 0.92;\nfunction computeTime(playerMount, mapGraph, dict, startingCity) {\n  let totalTime = 0;\n  let currentCity = startingCity;\n  for (const item of dict[\"recipe\"][\"buy\"]) {\n    if (currentCity === item[2]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\n    currentCity = item[2];\n  }\n  for (const item of dict[\"recipe\"][\"craft\"]) {\n    if (currentCity === item[2]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\n    currentCity = item[2];\n  }\n  return parseInt(totalTime) + 1;\n}\nfunction computeCarryingCapacity(playerMount, itemWeight) {\n  return parseInt(playerMount.getCarryLoad() / itemWeight);\n}\nfunction computeProfit(item, investment) {\n  const buyingList = item[\"recipe\"][\"buy\"];\n  const craftingList = item[\"recipe\"][\"craft\"];\n  const priceSell = item[\"price_sell\"];\n  const exists = craftingList.some(sublist => sublist.includes(item[\"id\"]));\n  if (exists) {\n    let quantity = 0;\n    let totalCost = buySum(buyingList); // for items which are bought\n    for (let i = 0; i < craftingList.length; i++) {\n      if (craftingList[i][0] === item[\"id\"]) {\n        quantity = craftingList[i][3];\n        totalCost += craftingList[i][5];\n      }\n    }\n    const gain = priceSell * quantity * MARKET_PERCENTAGE;\n    return gain - totalCost;\n  }\n  return -1;\n}\nfunction computeRoi(investment, profit) {\n  return parseInt(profit / investment * 100);\n}\nfunction formatNumber(num) {\n  let string = \"\";\n  if (num > 1000000000) {\n    string = (num / 1000000000).toFixed(2) + \"b\";\n  } else if (num > 1000000) {\n    string = (num / 1000000).toFixed(2) + \"m\";\n  } else if (num > 1000) {\n    string = (num / 1000).toFixed(2) + \"k\";\n  }\n  return string;\n}\nfunction final_json(p_items, site_input) {\n  var arr = Object.entries(p_items);\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  arr.map(item => {\n    item[1][\"time\"] = computeTime(mountObj, mapGraphJson, item[1], site_input[\"current_city\"]);\n    item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n    // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\n    item[1][\"profit\"] = 0;\n    // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\n    item[1][\"roi\"] = 0;\n  });\n  return arr;\n}\nfunction get_ppc() {}\nfunction compute_item(item) {\n  let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  item[\"time\"] = computeTime(mountObj, mapGraphJson, item, site_input[\"current_city\"]);\n  item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n  item[\"profit\"] = computeProfit(item, site_input[\"investment\"]);\n  item[\"roi\"] = computeRoi(site_input[\"investment\"], item[\"profit\"]);\n  console.log(item);\n  return item;\n}\nexport { final_json, compute_item };","map":{"version":3,"names":["Mount","transport_mounts","mapGraphJson","buySum","buyingList","sum","itemIndex","parseInt","REFINING_BONUS","CRAFTING_BONUS","MARKET_PERCENTAGE","computeTime","playerMount","mapGraph","dict","startingCity","totalTime","currentCity","item","cityTravelTime","computeCarryingCapacity","itemWeight","getCarryLoad","computeProfit","investment","craftingList","priceSell","exists","some","sublist","includes","quantity","totalCost","i","length","gain","computeRoi","profit","formatNumber","num","string","toFixed","final_json","p_items","site_input","arr","Object","entries","mount","mountObj","map","get_ppc","compute_item","JSON","parse","localStorage","getItem","console","log"],"sources":["C:/nginx-1.26.0/html/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\nimport mapGraphJson from '../json_input/cities.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nfunction buySum(buyingList) {\r\n    let sum = 0;\r\n    for (const itemIndex of buyingList) {\r\n        if (parseInt(itemIndex[3]) > 0) {\r\n            sum += parseInt(itemIndex[3]) * parseInt(itemIndex[4]);\r\n        }\r\n    }\r\n    return sum;\r\n}\r\nconst REFINING_BONUS=1.58\r\nconst CRAFTING_BONUS=1.33\r\nconst MARKET_PERCENTAGE=0.92 \r\n\r\nfunction computeTime(playerMount,mapGraph, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    for (const item of dict[\"recipe\"][\"buy\"]) {\r\n        if (currentCity === item[2]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\r\n        currentCity = item[2];\r\n    }\r\n    for (const item of dict[\"recipe\"][\"craft\"]) {\r\n        if (currentCity === item[2]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\r\n        currentCity = item[2];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    const buyingList = item[\"recipe\"][\"buy\"];\r\n    const craftingList = item[\"recipe\"][\"craft\"];\r\n    const priceSell = item[\"price_sell\"];\r\n    const exists = craftingList.some(sublist => sublist.includes(item[\"id\"]));\r\n    if (exists) {\r\n        let quantity = 0;\r\n        let totalCost = buySum(buyingList); // for items which are bought\r\n        for (let i = 0; i < craftingList.length; i++) {\r\n            if (craftingList[i][0] === item[\"id\"]) {\r\n                quantity = craftingList[i][3];\r\n                totalCost += craftingList[i][5];\r\n            }\r\n        }\r\n        const gain = priceSell * quantity * MARKET_PERCENTAGE;\r\n        return gain - totalCost;\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var arr = Object.entries(p_items);\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n\r\n    arr.map((item)=>{\r\n        item[1][\"time\"]              = computeTime(mountObj,\r\n                                    mapGraphJson,\r\n                                    item[1],\r\n                                    site_input[\"current_city\"]);\r\n        item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\r\n        item[1][\"profit\"]            = 0;\r\n        // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n        item[1][\"roi\"]               = 0;\r\n    })\r\n    return arr;\r\n}\r\n\r\nfunction get_ppc(){\r\n    \r\n}\r\n\r\nfunction compute_item(item){\r\n    let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n                    \r\n    \r\n    item[\"time\"]              = computeTime(mountObj,\r\n                                mapGraphJson,\r\n                                item,\r\n                                site_input[\"current_city\"]);\r\n    item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n    item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n    item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n    console.log(item);\r\n    return item;\r\n}\r\n\r\nexport {final_json, compute_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}