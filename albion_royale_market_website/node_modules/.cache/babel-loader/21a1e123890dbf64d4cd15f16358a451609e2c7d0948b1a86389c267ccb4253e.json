{"ast":null,"code":"import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst defaultIndex = 0;\nexport class Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    container.getAbsorber = idxOrName => idxOrName === undefined || isNumber(idxOrName) ? this.array[idxOrName ?? defaultIndex] : this.array.find(t => t.name === idxOrName);\n    container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n  }\n  async addAbsorber(options, position) {\n    const {\n        AbsorberInstance\n      } = await import(\"./AbsorberInstance.js\"),\n      absorber = new AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n  draw(context) {\n    for (const absorber of this.array) {\n      absorber.draw(context);\n    }\n  }\n  handleClickMode(mode) {\n    const absorberOptions = this.absorbers,\n      modeAbsorbers = this.interactivityAbsorbers;\n    if (mode === \"absorber\") {\n      const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers),\n        absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions),\n        aPosition = this.container.interactivity.mouse.clickPosition;\n      void this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n  async init() {\n    this.absorbers = this.container.actualOptions.absorbers;\n    this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n    const promises = executeOnSingleOrMultiple(this.absorbers, async absorber => {\n      await this.addAbsorber(absorber);\n    });\n    if (promises instanceof Array) {\n      await Promise.all(promises);\n    } else {\n      await promises;\n    }\n  }\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber),\n      deleteCount = 1;\n    if (index >= defaultIndex) {\n      this.array.splice(index, deleteCount);\n    }\n  }\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n  stop() {\n    this.array = [];\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","isNumber","itemFromSingleOrMultiple","defaultIndex","Absorbers","constructor","container","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","AbsorberInstance","absorber","push","draw","context","handleClickMode","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","absorbersOptions","aPosition","interactivity","mouse","clickPosition","init","actualOptions","modes","promises","Array","Promise","all","particleUpdate","particle","attract","destroyed","removeAbsorber","index","indexOf","deleteCount","splice","resize","stop"],"sources":["C:/Users/andre/OneDrive/Desktop/arm/your_app/node_modules/@tsparticles/plugin-absorbers/browser/Absorbers.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const { AbsorberInstance } = await import(\"./AbsorberInstance.js\"), absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}