{"ast":null,"code":"import{Mount}from\"./classMount\";import transport_mounts from'../json_input/transport_mounts.json';// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\nfunction buySum(buyingList){let sum=0;for(const itemIndex of buyingList){if(parseInt(itemIndex[3])>0){sum+=parseInt(itemIndex[3])*parseInt(itemIndex[4]);}}return sum;}function computeTime(playerMount,dict,startingCity){let totalTime=0;let currentCity=startingCity;for(const item of dict[\"recipe\"][\"buy\"]){if(currentCity===item[2]){continue;}totalTime+=playerMount.cityTravelTime(mapGraph,currentCity,item[2]);currentCity=item[2];}for(const item of dict[\"recipe\"][\"craft\"]){if(currentCity===item[2]){continue;}totalTime+=playerMount.cityTravelTime(mapGraph,currentCity,item[2]);currentCity=item[2];}return parseInt(totalTime)+1;}function computeCarryingCapacity(playerMount,itemWeight){return parseInt(playerMount.getCarryLoad()/itemWeight);}function computeProfit(item,investment){const buyingList=item[\"recipe\"][\"buy\"];const craftingList=item[\"recipe\"][\"craft\"];const priceSell=item[\"price_sell\"];const exists=craftingList.some(sublist=>sublist.includes(item[\"id\"]));if(exists){let quantity=0;let totalCost=buySum(buyingList);// for items which are bought\nfor(let i=0;i<craftingList.length;i++){if(craftingList[i][0]===item[\"id\"]){quantity=craftingList[i][3];totalCost+=craftingList[i][5];}}const gain=priceSell*quantity*MARKET_PERCENTAGE;return gain-totalCost;}return-1;}function computeRoi(investment,profit){return parseInt(profit/investment*100);}function formatNumber(num){let string=\"\";if(num>1000000000){string=(num/1000000000).toFixed(2)+\"b\";}else if(num>1000000){string=(num/1000000).toFixed(2)+\"m\";}else if(num>1000){string=(num/1000).toFixed(2)+\"k\";}return string;}function final_json(p_items,site_input){var arr=Object.entries(p_items);var mount=transport_mounts[site_input[\"mount\"]];console.log(mount);var mountObj=new Mount(mount[\"Gallop delay\"],mount[\"Move bonus\"],mount[\"Gallop bonus\"],mount[\"Carry capacity\"]);arr.map(item=>{item[\"time\"]=computeTime(mount,item[\"recipe\"],site_input[\"staring_city\"]);item[\"carrying_capacity\"]=site_input[\"carrying_capacity\"];item[\"profit\"]=computeProfit(item,site_input[\"investment\"]);item[\"roi\"]=computeRoi(site_input[\"investment\"],item[\"profit\"]);});}function modify_item(final_json,item){console.log(\"\".concat(final_json,\" \\n \").concat(item));}export{final_json,modify_item};","map":{"version":3,"names":["Mount","transport_mounts","buySum","buyingList","sum","itemIndex","parseInt","computeTime","playerMount","dict","startingCity","totalTime","currentCity","item","cityTravelTime","mapGraph","computeCarryingCapacity","itemWeight","getCarryLoad","computeProfit","investment","craftingList","priceSell","exists","some","sublist","includes","quantity","totalCost","i","length","gain","MARKET_PERCENTAGE","computeRoi","profit","formatNumber","num","string","toFixed","final_json","p_items","site_input","arr","Object","entries","mount","console","log","mountObj","map","modify_item","concat"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nfunction buySum(buyingList) {\r\n    let sum = 0;\r\n    for (const itemIndex of buyingList) {\r\n        if (parseInt(itemIndex[3]) > 0) {\r\n            sum += parseInt(itemIndex[3]) * parseInt(itemIndex[4]);\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n\r\nfunction computeTime(playerMount, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    for (const item of dict[\"recipe\"][\"buy\"]) {\r\n        if (currentCity === item[2]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\r\n        currentCity = item[2];\r\n    }\r\n    for (const item of dict[\"recipe\"][\"craft\"]) {\r\n        if (currentCity === item[2]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[2]);\r\n        currentCity = item[2];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    const buyingList = item[\"recipe\"][\"buy\"];\r\n    const craftingList = item[\"recipe\"][\"craft\"];\r\n    const priceSell = item[\"price_sell\"];\r\n    const exists = craftingList.some(sublist => sublist.includes(item[\"id\"]));\r\n    if (exists) {\r\n        let quantity = 0;\r\n        let totalCost = buySum(buyingList); // for items which are bought\r\n        for (let i = 0; i < craftingList.length; i++) {\r\n            if (craftingList[i][0] === item[\"id\"]) {\r\n                quantity = craftingList[i][3];\r\n                totalCost += craftingList[i][5];\r\n            }\r\n        }\r\n        const gain = priceSell * quantity * MARKET_PERCENTAGE;\r\n        return gain - totalCost;\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var arr = Object.entries(p_items);\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    console.log(mount);\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n\r\n    arr.map((item)=>{\r\n        item[\"time\"]              = computeTime(mount,\r\n                                    item[\"recipe\"],\r\n                                    site_input[\"staring_city\"]);\r\n\r\n        item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n        item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n\r\n    })\r\n}\r\nfunction modify_item(final_json,item){\r\n    console.log(`${final_json} \\n ${item}`);\r\n}\r\nexport {final_json, modify_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}