{"ast":null,"code":"import { Mount } from \"./classMount\";\nimport transport_mounts from '../json_input/transport_mounts.json';\nimport mapGraphJson from '../json_input/cities.json';\n\n// function sumQuantity(itemQuantities) {\n//     let neededQuantity = 0;\n//     for (const index of itemQuantities[\"buy\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     for (const index of itemQuantities[\"craft\"]) {\n//         if (index[3] > 0) {\n//             neededQuantity += index[3];\n//         } else {\n//             return ERROR_CODE0;\n//         }\n//     }\n//     return neededQuantity;\n// }\n\nconst REFINING_BONUS = 1.58;\nconst CRAFTING_BONUS = 1.33;\nconst MARKET_PERCENTAGE = 0.92;\nconst TAX = 0.08;\nconst TAX_HI = 0.12;\nfunction computeTime(playerMount, mapGraph, dict, startingCity) {\n  let totalTime = 0;\n  let currentCity = startingCity;\n  if (dict[\"recipe\"] == undefined) dict = dict[1];\n  for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\n    if (currentCity === item[1][\"city_buy\"]) {\n      continue;\n    }\n    totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\n    currentCity = item[1][\"city_buy\"];\n  }\n  return parseInt(totalTime) + 1;\n}\nfunction computeCarryingCapacity(playerMount, itemWeight) {\n  return parseInt(playerMount.getCarryLoad() / itemWeight);\n}\nfunction getAmount(recipe, investment) {\n  let sum = 0;\n  for (const item in recipe) {\n    const tempAmount = parseInt(recipe[item][1][\"amount\"], 10);\n    sum += tempAmount * parseInt(recipe[item][1][\"price_buy\"], 10);\n  }\n  return investment / sum;\n}\nfunction computeProfit(item, investment) {\n  const buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\n  let craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\n  //console.log(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"]);\n  const priceSell = parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"] * MARKET_PERCENTAGE);\n  if (craftingList == undefined) return -1;\n  let nca = getAmount(buyingList, investment);\n  let gca = nca * REFINING_BONUS;\n  let quantity = 0;\n  let initCost = 0;\n  //console.log(craftingList);\n  //console.log(buyingList);\n  //Init\n  {\n    const index = buyingList.length - 1;\n    //console.log(buyingList[index]);\n    const amount = parseInt(buyingList[index][1][\"amount\"]);\n    if (amount * nca / REFINING_BONUS * buyingList[index][1][\"price_buy\"] > amount * nca * craftingList[index][1][\"price_buy\"]) {\n      buyingList.pop(index);\n      craftingList[index][1][\"amount\"] = amount * nca;\n    } else {\n      craftingList[index][1][\"amount\"] = parseInt(amount * nca / REFINING_BONUS);\n      craftingList[index][1][\"price_buy\"] = craftingList[index][1][\"amount\"] * parseInt(buyingList[index][1][\"price_buy\"]) / nca;\n    }\n  }\n  //console.log(nca);\n  for (let i = craftingList.length - 2; i >= 0; i--) {\n    //console.log(craftingList[i][1]);\n    //console.log(buyingList[i][1]);\n    let amount_m1 = craftingList[i + 1][1][\"amount\"];\n    let ppc_m1 = craftingList[i + 1][1][\"price_buy\"];\n    //console.log(ppc_m1);\n    initCost += ppc_m1 * amount_m1;\n    initCost += buyingList[i][1][\"price_buy\"] * buyingList[i][1][\"amount\"] * nca;\n  }\n  //console.log(initCost);\n  const gain = priceSell * gca;\n  //console.log(priceSell);\n  //console.log(gain);\n  let profit = gain - initCost;\n  //console.log(profit);\n  return gain - initCost;\n}\nfunction computeRoi(investment, profit) {\n  return parseInt(profit / investment * 100);\n}\nfunction formatNumber(num) {\n  let string = \"\";\n  if (num > 1000000000) {\n    string = (num / 1000000000).toFixed(2) + \"b\";\n  } else if (num > 1000000) {\n    string = (num / 1000000).toFixed(2) + \"m\";\n  } else if (num > 1000) {\n    string = (num / 1000).toFixed(2) + \"k\";\n  }\n  return string;\n}\nfunction final_json(p_items, site_input) {\n  var arr = Object.entries(p_items);\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  arr.map(item => {\n    item[1][\"time\"] = computeTime(mountObj, mapGraphJson, item[1], site_input[\"current_city\"]);\n    item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n    // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\n    item[1][\"profit\"] = 0;\n    // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\n    item[1][\"roi\"] = 0;\n  });\n  return arr;\n}\nfunction compute_item(item) {\n  let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\n  var mount = transport_mounts[site_input[\"mount\"]];\n  var mountObj = new Mount(mount[\"Gallop delay\"], mount[\"Move bonus\"], mount[\"Gallop bonus\"], mount[\"Carry capacity\"]);\n  item[\"time\"] = computeTime(mountObj, mapGraphJson, item, site_input[\"current_city\"]);\n  item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\n  item[\"profit\"] = computeProfit(item, site_input[\"investment\"]);\n  item[\"roi\"] = computeRoi(site_input[\"investment\"], item[\"profit\"]);\n  return item;\n}\nexport { final_json, compute_item };","map":{"version":3,"names":["Mount","transport_mounts","mapGraphJson","REFINING_BONUS","CRAFTING_BONUS","MARKET_PERCENTAGE","TAX","TAX_HI","computeTime","playerMount","mapGraph","dict","startingCity","totalTime","currentCity","undefined","item","Object","entries","cityTravelTime","parseInt","computeCarryingCapacity","itemWeight","getCarryLoad","getAmount","recipe","investment","sum","tempAmount","computeProfit","buyingList","craftingList","priceSell","nca","gca","quantity","initCost","index","length","amount","pop","i","amount_m1","ppc_m1","gain","profit","computeRoi","formatNumber","num","string","toFixed","final_json","p_items","site_input","arr","mount","mountObj","map","compute_item","JSON","parse","localStorage","getItem"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/src/scripts/new_final_json.js"],"sourcesContent":["import { Mount } from \"./classMount\";\r\nimport transport_mounts from '../json_input/transport_mounts.json';\r\nimport mapGraphJson from '../json_input/cities.json';\r\n\r\n// function sumQuantity(itemQuantities) {\r\n//     let neededQuantity = 0;\r\n//     for (const index of itemQuantities[\"buy\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     for (const index of itemQuantities[\"craft\"]) {\r\n//         if (index[3] > 0) {\r\n//             neededQuantity += index[3];\r\n//         } else {\r\n//             return ERROR_CODE0;\r\n//         }\r\n//     }\r\n//     return neededQuantity;\r\n// }\r\n\r\nconst REFINING_BONUS=1.58\r\nconst CRAFTING_BONUS=1.33\r\nconst MARKET_PERCENTAGE=0.92 \r\nconst TAX =0.08\r\nconst TAX_HI =0.12\r\n\r\nfunction computeTime(playerMount,mapGraph, dict, startingCity) {\r\n    let totalTime = 0;\r\n    let currentCity = startingCity;\r\n    if(dict[\"recipe\"] == undefined)dict = dict[1];\r\n    for (const item of Object.entries(dict[\"recipe\"][\"buy\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    for (const item of Object.entries(dict[\"recipe\"][\"craft\"])) {\r\n        if (currentCity === item[1][\"city_buy\"]) {\r\n            continue;\r\n        }\r\n        totalTime += playerMount.cityTravelTime(mapGraph, currentCity, item[1][\"city_buy\"]);\r\n        currentCity = item[1][\"city_buy\"];\r\n    }\r\n    return parseInt(totalTime) + 1;\r\n}\r\n\r\nfunction computeCarryingCapacity(playerMount, itemWeight) {\r\n    return parseInt(playerMount.getCarryLoad() / itemWeight);\r\n}\r\n\r\nfunction getAmount(recipe,investment){\r\n    let sum = 0;\r\n    for(const item in recipe){\r\n        const tempAmount =parseInt(recipe[item][1][\"amount\"],10);\r\n        sum +=tempAmount*parseInt(recipe[item][1][\"price_buy\"],10);\r\n    }\r\n    return investment/sum;\r\n}\r\n\r\nfunction computeProfit(item, investment) {\r\n    const buyingList = Object.entries(item[\"recipe\"][\"buy\"]);\r\n    let craftingList = Object.entries(item[\"recipe\"][\"craft\"]);\r\n    //console.log(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"]);\r\n    const priceSell = parseInt(item[\"recipe\"][\"craft\"][item[\"ign\"]][\"price_sell\"] * MARKET_PERCENTAGE);\r\n    if(craftingList == undefined)return -1;\r\n    let nca = getAmount(buyingList,investment);\r\n    let gca = nca*REFINING_BONUS;\r\n    let quantity = 0;\r\n    let initCost = 0;\r\n    //console.log(craftingList);\r\n    //console.log(buyingList);\r\n    //Init\r\n    {\r\n        const index = buyingList.length-1;\r\n        //console.log(buyingList[index]);\r\n        const amount = parseInt(buyingList[index][1][\"amount\"]);\r\n        if((amount*nca/REFINING_BONUS)*buyingList[index][1][\"price_buy\"] > (amount*nca*craftingList[index][1][\"price_buy\"])){\r\n            buyingList.pop(index);\r\n            craftingList[index][1][\"amount\"] = amount*nca;\r\n        }else{\r\n            craftingList[index][1][\"amount\"] = parseInt(amount*nca/REFINING_BONUS);\r\n            craftingList[index][1][\"price_buy\"] = craftingList[index][1][\"amount\"]*parseInt(buyingList[index][1][\"price_buy\"])/nca;\r\n        }\r\n    }\r\n    //console.log(nca);\r\n    for (let i = craftingList.length - 2 ; i>=0;i--) {\r\n        //console.log(craftingList[i][1]);\r\n        //console.log(buyingList[i][1]);\r\n        let amount_m1 = craftingList[i+1][1][\"amount\"];\r\n        let ppc_m1    = craftingList[i+1][1][\"price_buy\"];\r\n        //console.log(ppc_m1);\r\n        initCost += ppc_m1*amount_m1;\r\n        initCost += buyingList[i][1][\"price_buy\"]*buyingList[i][1][\"amount\"]*nca;\r\n    }\r\n    //console.log(initCost);\r\n    const gain = priceSell *gca;\r\n    //console.log(priceSell);\r\n    //console.log(gain);\r\n    let profit = gain-initCost;\r\n    //console.log(profit);\r\n    return gain - initCost;\r\n}\r\n\r\nfunction computeRoi(investment, profit) {\r\n    return parseInt((profit / investment) * 100);\r\n}\r\n\r\nfunction formatNumber(num) {\r\n    let string = \"\";\r\n    if (num > 1000000000) {\r\n        string = (num / 1000000000).toFixed(2) + \"b\";\r\n    } else if (num > 1000000) {\r\n        string = (num / 1000000).toFixed(2) + \"m\";\r\n    } else if (num > 1000) {\r\n        string = (num / 1000).toFixed(2) + \"k\";\r\n    }\r\n    return string;\r\n}\r\n\r\n\r\nfunction final_json(p_items,site_input){\r\n    var arr = Object.entries(p_items);\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n\r\n    arr.map((item)=>{\r\n        item[1][\"time\"]             = computeTime(mountObj,\r\n                                        mapGraphJson,\r\n                                        item[1],\r\n                                        site_input[\"current_city\"]);\r\n        item[1][\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n        // item[1][\"profit\"]            = computeProfit(item[1],site_input[\"investment\"]);\r\n        item[1][\"profit\"]            = 0;\r\n        // item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n        item[1][\"roi\"]               = 0;\r\n    })\r\n    return arr;\r\n}\r\n\r\nfunction compute_item(item){\r\n    let site_input = JSON.parse(localStorage.getItem(\"siteInput\"));\r\n    var mount = transport_mounts[site_input[\"mount\"]]\r\n    var mountObj =new Mount(mount[\"Gallop delay\"],\r\n                            mount[\"Move bonus\"],\r\n                            mount[\"Gallop bonus\"],\r\n                            mount[\"Carry capacity\"]);\r\n    \r\n    \r\n    item[\"time\"]              = computeTime(mountObj,\r\n                                mapGraphJson,\r\n                                item,\r\n                                site_input[\"current_city\"]);\r\n\r\n    item[\"carrying_capacity\"] = site_input[\"carrying_capacity\"];\r\n    item[\"profit\"]            = computeProfit(item,site_input[\"investment\"]);\r\n    item[\"roi\"]               = computeRoi(site_input[\"investment\"],item[\"profit\"]);\r\n    return item;    \r\n}\r\n\r\nexport {final_json, compute_item};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}