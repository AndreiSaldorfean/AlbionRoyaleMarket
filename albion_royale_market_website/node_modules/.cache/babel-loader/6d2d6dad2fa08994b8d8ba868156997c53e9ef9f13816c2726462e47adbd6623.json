{"ast":null,"code":"import { clamp, getDistance, getDistances, getRandom, getRangeValue } from \"@tsparticles/engine\";\nconst half = 0.5,\n  minVelocity = 0,\n  identity = 1,\n  moveSpeedFactor = 60,\n  minSpinRadius = 0,\n  spinFactor = 0.01;\nexport function applyDistance(particle) {\n  var _ref, _ref2;\n  const initialPosition = particle.initialPosition,\n    {\n      dx,\n      dy\n    } = getDistances(initialPosition, particle.position),\n    dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy),\n    {\n      maxDistance\n    } = particle.retina,\n    hDistance = maxDistance.horizontal,\n    vDistance = maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  const hasHDistance = (_ref = hDistance && dxFixed >= hDistance) !== null && _ref !== void 0 ? _ref : false,\n    hasVDistance = (_ref2 = vDistance && dyFixed >= vDistance) !== null && _ref2 !== void 0 ? _ref2 : false;\n  if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < minVelocity || pos.x > initialPosition.x && vel.x > minVelocity)) {\n      vel.x *= -getRandom();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < minVelocity || pos.y > initialPosition.y && vel.y > minVelocity)) {\n      vel.y *= -getRandom();\n    }\n  }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n  applyPath(particle, delta);\n  const gravityOptions = particle.gravity,\n    gravityFactor = gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && gravityOptions.inverse ? -identity : identity;\n  if (moveDrift && moveSpeed) {\n    particle.velocity.x += moveDrift * delta.factor / (moveSpeedFactor * moveSpeed);\n  }\n  if (gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && moveSpeed) {\n    particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (moveSpeedFactor * moveSpeed);\n  }\n  const decay = particle.moveDecay;\n  particle.velocity.multTo(decay);\n  const velocity = particle.velocity.mult(moveSpeed);\n  if (gravityOptions !== null && gravityOptions !== void 0 && gravityOptions.enable && maxSpeed > minVelocity && (!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed)) {\n    velocity.y = gravityFactor * maxSpeed;\n    if (moveSpeed) {\n      particle.velocity.y = velocity.y / moveSpeed;\n    }\n  }\n  const zIndexOptions = particle.options.zIndex,\n    zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n  velocity.multTo(zVelocityFactor);\n  const {\n    position\n  } = particle;\n  position.addTo(velocity);\n  if (moveOptions.vibrate) {\n    position.x += Math.sin(position.x * Math.cos(position.y));\n    position.y += Math.cos(position.y * Math.sin(position.x));\n  }\n}\nexport function spin(particle, moveSpeed) {\n  const container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  const updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height),\n    halfMaxSize = maxCanvasSize * half;\n  if (particle.spin.radius > halfMaxSize) {\n    particle.spin.radius = halfMaxSize;\n    particle.spin.acceleration *= -identity;\n  } else if (particle.spin.radius < minSpinRadius) {\n    particle.spin.radius = minSpinRadius;\n    particle.spin.acceleration *= -identity;\n  }\n  particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var _particle$pathGenerat;\n  const particlesOptions = particle.options,\n    pathOptions = particlesOptions.move.path,\n    pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  const path = (_particle$pathGenerat = particle.pathGenerator) === null || _particle$pathGenerat === void 0 ? void 0 : _particle$pathGenerat.generate(particle, delta);\n  if (path) {\n    particle.velocity.addTo(path);\n  }\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n    particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n  var _spinOptions$position;\n  const container = particle.container,\n    options = particle.options,\n    spinOptions = options.move.spin;\n  if (!spinOptions.enable) {\n    return;\n  }\n  const spinPos = (_spinOptions$position = spinOptions.position) !== null && _spinOptions$position !== void 0 ? _spinOptions$position : {\n      x: 50,\n      y: 50\n    },\n    spinFactor = 0.01,\n    spinCenter = {\n      x: spinPos.x * spinFactor * container.canvas.size.width,\n      y: spinPos.y * spinFactor * container.canvas.size.height\n    },\n    pos = particle.getPosition(),\n    distance = getDistance(pos, spinCenter),\n    spinAcceleration = getRangeValue(spinOptions.acceleration);\n  particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n  const minVelocity = 0;\n  particle.spin = {\n    center: spinCenter,\n    direction: particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\",\n    angle: particle.velocity.angle,\n    radius: distance,\n    acceleration: particle.retina.spinAcceleration\n  };\n}","map":{"version":3,"names":["clamp","getDistance","getDistances","getRandom","getRangeValue","half","minVelocity","identity","moveSpeedFactor","minSpinRadius","spinFactor","applyDistance","particle","_ref","_ref2","initialPosition","dx","dy","position","dxFixed","Math","abs","dyFixed","maxDistance","retina","hDistance","horizontal","vDistance","vertical","hasHDistance","hasVDistance","misplaced","velocity","x","y","pos","vel","move","moveOptions","moveSpeed","maxSpeed","moveDrift","delta","applyPath","gravityOptions","gravity","gravityFactor","enable","inverse","factor","acceleration","decay","moveDecay","multTo","mult","zIndexOptions","options","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","sin","cos","spin","container","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","size","width","height","halfMaxSize","_particle$pathGenerat","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","value","pathGenerator","generate","getProximitySpeedFactor","slow","inRange","initSpin","_spinOptions$position","spinOptions","spinPos","spinCenter","getPosition","distance","spinAcceleration","pixelRatio"],"sources":["C:/nginx/html/AlbionRoyaleMarket/albion_royale_market_website/node_modules/@tsparticles/move-base/browser/Utils.js"],"sourcesContent":["import { clamp, getDistance, getDistances, getRandom, getRangeValue, } from \"@tsparticles/engine\";\nconst half = 0.5, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01;\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n        particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    const minVelocity = 0;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}