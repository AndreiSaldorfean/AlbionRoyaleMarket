var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Absorbers = void 0;
    const engine_1 = require("@tsparticles/engine");
    const defaultIndex = 0;
    class Absorbers {
        constructor(container) {
            this.container = container;
            this.array = [];
            this.absorbers = [];
            this.interactivityAbsorbers = [];
            container.getAbsorber = (idxOrName) => idxOrName === undefined || (0, engine_1.isNumber)(idxOrName)
                ? this.array[idxOrName ?? defaultIndex]
                : this.array.find((t) => t.name === idxOrName);
            container.addAbsorber = async (options, position) => this.addAbsorber(options, position);
        }
        async addAbsorber(options, position) {
            const { AbsorberInstance } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./AbsorberInstance.js"))) : new Promise((resolve_1, reject_1) => { require(["./AbsorberInstance.js"], resolve_1, reject_1); }).then(__importStar)), absorber = new AbsorberInstance(this, this.container, options, position);
            this.array.push(absorber);
            return absorber;
        }
        draw(context) {
            for (const absorber of this.array) {
                absorber.draw(context);
            }
        }
        handleClickMode(mode) {
            const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;
            if (mode === "absorber") {
                const absorbersModeOptions = (0, engine_1.itemFromSingleOrMultiple)(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? (0, engine_1.itemFromSingleOrMultiple)(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;
                void this.addAbsorber(absorbersOptions, aPosition);
            }
        }
        async init() {
            this.absorbers = this.container.actualOptions.absorbers;
            this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;
            const promises = (0, engine_1.executeOnSingleOrMultiple)(this.absorbers, async (absorber) => {
                await this.addAbsorber(absorber);
            });
            if (promises instanceof Array) {
                await Promise.all(promises);
            }
            else {
                await promises;
            }
        }
        particleUpdate(particle) {
            for (const absorber of this.array) {
                absorber.attract(particle);
                if (particle.destroyed) {
                    break;
                }
            }
        }
        removeAbsorber(absorber) {
            const index = this.array.indexOf(absorber), deleteCount = 1;
            if (index >= defaultIndex) {
                this.array.splice(index, deleteCount);
            }
        }
        resize() {
            for (const absorber of this.array) {
                absorber.resize();
            }
        }
        stop() {
            this.array = [];
        }
    }
    exports.Absorbers = Absorbers;
});
