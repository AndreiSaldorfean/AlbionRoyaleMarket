var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Absorber.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsorbersPlugin = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Absorber_js_1 = require("./Options/Classes/Absorber.js");
    class AbsorbersPlugin {
        constructor() {
            this.id = "absorbers";
        }
        async getPlugin(container) {
            const { Absorbers } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Absorbers.js"))) : new Promise((resolve_1, reject_1) => { require(["./Absorbers.js"], resolve_1, reject_1); }).then(__importStar));
            return new Absorbers(container);
        }
        loadOptions(options, source) {
            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
                return;
            }
            if (source?.absorbers) {
                options.absorbers = (0, engine_1.executeOnSingleOrMultiple)(source.absorbers, (absorber) => {
                    const tmp = new Absorber_js_1.Absorber();
                    tmp.load(absorber);
                    return tmp;
                });
            }
            options.interactivity.modes.absorbers = (0, engine_1.executeOnSingleOrMultiple)(source?.interactivity?.modes?.absorbers, (absorber) => {
                const tmp = new Absorber_js_1.Absorber();
                tmp.load(absorber);
                return tmp;
            });
        }
        needsPlugin(options) {
            if (!options) {
                return false;
            }
            const absorbers = options.absorbers;
            if ((0, engine_1.isArray)(absorbers)) {
                return !!absorbers.length;
            }
            else if (absorbers) {
                return true;
            }
            else if (options.interactivity?.events?.onClick?.mode &&
                (0, engine_1.isInArray)("absorber", options.interactivity.events.onClick.mode)) {
                return true;
            }
            return false;
        }
    }
    exports.AbsorbersPlugin = AbsorbersPlugin;
});
