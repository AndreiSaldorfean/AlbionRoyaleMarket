/*! For license information please see 932.min.js.LICENSE.txt */
(this.webpackChunk_tsparticles_updater_twinkle=this.webpackChunk_tsparticles_updater_twinkle||[]).push([[932],{932:(e,t,o)=>{o.d(t,{TwinkleUpdater:()=>n});var i=o(303);class s{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=(0,i.setRangeValue)(e.opacity)))}}class l{constructor(){this.lines=new s,this.particles=new s}load(e){e&&(this.lines.load(e.lines),this.particles.load(e.particles))}}class n{getColorStyles(e,t,o,s){const l=e.options.twinkle;if(!l)return{};const n=l.particles,a=n.enable&&(0,i.getRandom)()<n.frequency,r=e.options.zIndex,c=(1-e.zIndexFactor)**r.opacityRate,p=a?(0,i.getRangeValue)(n.opacity)*c:s,d=(0,i.rangeColorToHsl)(n.color),u=d?(0,i.getStyleFromHsl)(d,p):void 0,h={},w=a&&u;return h.fill=w?u:void 0,h.stroke=w?u:void 0,h}async init(){await Promise.resolve()}isEnabled(e){const t=e.options.twinkle;return!!t&&t.particles.enable}loadOptions(e,...t){e.twinkle||(e.twinkle=new l);for(const o of t)e.twinkle.load(o?.twinkle)}async update(){await Promise.resolve()}}}}]);