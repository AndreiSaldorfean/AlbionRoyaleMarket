"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutOfCanvasUpdater = void 0;
const BounceOutMode_js_1 = require("./BounceOutMode.js");
const DestroyOutMode_js_1 = require("./DestroyOutMode.js");
const NoneOutMode_js_1 = require("./NoneOutMode.js");
const OutOutMode_js_1 = require("./OutOutMode.js");
const checkOutMode = (outModes, outMode) => {
    return (outModes.default === outMode ||
        outModes.bottom === outMode ||
        outModes.left === outMode ||
        outModes.right === outMode ||
        outModes.top === outMode);
};
class OutOfCanvasUpdater {
    constructor(container) {
        this._updateOutMode = (particle, delta, outMode, direction) => {
            for (const updater of this.updaters) {
                updater.update(particle, direction, delta, outMode);
            }
        };
        this.container = container;
        this.updaters = [];
    }
    init(particle) {
        this.updaters = [];
        const outModes = particle.options.move.outModes;
        if (checkOutMode(outModes, "bounce")) {
            this.updaters.push(new BounceOutMode_js_1.BounceOutMode(this.container));
        }
        else if (checkOutMode(outModes, "out")) {
            this.updaters.push(new OutOutMode_js_1.OutOutMode(this.container));
        }
        else if (checkOutMode(outModes, "destroy")) {
            this.updaters.push(new DestroyOutMode_js_1.DestroyOutMode(this.container));
        }
        else if (checkOutMode(outModes, "none")) {
            this.updaters.push(new NoneOutMode_js_1.NoneOutMode(this.container));
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning;
    }
    update(particle, delta) {
        const outModes = particle.options.move.outModes;
        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
    }
}
exports.OutOfCanvasUpdater = OutOfCanvasUpdater;
