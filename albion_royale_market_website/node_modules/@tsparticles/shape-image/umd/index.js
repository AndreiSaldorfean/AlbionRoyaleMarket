var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Utils.js", "@tsparticles/engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadImageShape = void 0;
    const Utils_js_1 = require("./Utils.js");
    const engine_1 = require("@tsparticles/engine");
    const extLength = 3;
    function addLoadImageToEngine(engine) {
        if (engine.loadImage) {
            return;
        }
        engine.loadImage = async (data) => {
            if (!data.name && !data.src) {
                throw new Error(`${engine_1.errorPrefix} no image source provided`);
            }
            if (!engine.images) {
                engine.images = [];
            }
            if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {
                return;
            }
            try {
                const image = {
                    gif: data.gif ?? false,
                    name: data.name ?? data.src,
                    source: data.src,
                    type: data.src.substring(data.src.length - extLength),
                    error: false,
                    loading: true,
                    replaceColor: data.replaceColor,
                    ratio: data.width && data.height ? data.width / data.height : undefined,
                };
                engine.images.push(image);
                let imageFunc;
                if (data.gif) {
                    const { loadGifImage } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./GifUtils/Utils.js"))) : new Promise((resolve_1, reject_1) => { require(["./GifUtils/Utils.js"], resolve_1, reject_1); }).then(__importStar));
                    imageFunc = loadGifImage;
                }
                else {
                    imageFunc = data.replaceColor ? Utils_js_1.downloadSvgImage : Utils_js_1.loadImage;
                }
                await imageFunc(image);
            }
            catch {
                throw new Error(`${engine_1.errorPrefix} ${data.name ?? data.src} not found`);
            }
        };
    }
    async function loadImageShape(engine, refresh = true) {
        addLoadImageToEngine(engine);
        const { ImagePreloaderPlugin } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./ImagePreloader.js"))) : new Promise((resolve_2, reject_2) => { require(["./ImagePreloader.js"], resolve_2, reject_2); }).then(__importStar)), { ImageDrawer } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./ImageDrawer.js"))) : new Promise((resolve_3, reject_3) => { require(["./ImageDrawer.js"], resolve_3, reject_3); }).then(__importStar));
        const preloader = new ImagePreloaderPlugin(engine);
        await engine.addPlugin(preloader, refresh);
        await engine.addShape(["image", "images"], new ImageDrawer(engine), refresh);
    }
    exports.loadImageShape = loadImageShape;
});
