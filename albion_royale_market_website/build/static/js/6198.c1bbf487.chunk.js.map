{"version":3,"file":"static/js/6198.c1bbf487.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-grab/browser/Utils.js","../node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js"],"sourcesContent":["import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["drawGrab","container","particle","lineColor","opacity","mousePos","canvas","draw","ctx","_particle$retina$link","beginPos","getPosition","context","width","begin","end","colorLine","drawLine","strokeStyle","getStyleFromRgb","lineWidth","stroke","drawGrabLine","retina","linksWidth","Grabber","ExternalInteractorBase","constructor","super","clear","init","this","grab","actualOptions","interactivity","modes","grabModeDistance","distance","pixelRatio","interact","events","onHover","enable","status","mouseMoveEvent","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","_grabLineOptions$colo","_particle$options$lin","pos","pointDistance","getDistance","grabLineOptions","links","lineOpacity","opacityLine","optColor","color","options","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","getLinkColor","undefined","_particle$interactivi","isInArray","mode","loadModeOptions","Grab","_len","arguments","length","sources","Array","_key","source","load","reset"],"sourceRoot":""}