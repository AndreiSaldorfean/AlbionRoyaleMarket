{"version":3,"file":"static/js/1638.bc5109e5.chunk.js","mappings":"2JAGA,MAAMA,EAAc,+FACb,MAAMC,EACTC,WAAAA,GACIC,KAAKC,gBAAkB,IAAIC,GAC/B,CACAC,OAAAA,GACI,IAAK,MAAOC,EAAKC,KAAcL,KAAKC,gBAC5BI,aAAqBC,cACZ,OAATD,QAAS,IAATA,GAAAA,EAAWE,QACXP,KAAKC,gBAAgBO,OAAOJ,GAGxC,CACAK,IAAAA,CAAKC,IChBF,SAAmBA,GACtB,MAAM,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,EAAM,QAAEC,GAAYJ,EAAML,EAAYO,EAASP,UAAuBU,EAAH,EAAcF,EAAiBG,EAAgBL,EAAQM,YAChJZ,IAGLM,EAAQM,YAAcH,EACtBH,EAAQO,UAAUb,GAAYQ,GAASA,EAAQE,EAAUA,GACzDJ,EAAQM,YAAcD,EAC1B,CDSQG,CAAUT,EACd,CACA,UAAMU,CAAKC,GACP,MAAMC,EAAUD,EAAUE,cAC1B,IAAKC,EAAAA,EAAWC,MAAMC,IAAMC,EAAAA,EAAAA,IAAUD,EAAGJ,EAAQM,UAAUC,MAAMC,QAC7D,OAEJ,MAAMC,EAAW,EAACC,EAAAA,EAAAA,IAASnC,IAAeoC,EAAeT,EAAAA,EACpDU,KAAKR,GAAMJ,EAAQM,UAAUC,MAAMP,QAAQI,KAC3CD,MAAMC,KAAQA,IACfO,IACAE,EAAAA,EAAAA,IAA0BF,GAAeJ,IACjCA,EAAMO,MACNL,EAASM,MAAKL,EAAAA,EAAAA,IAASH,EAAMO,MACjC,UAGFE,QAAQC,IAAIR,EACtB,CACAS,eAAAA,CAAgB5B,UACLA,EAASP,SACpB,CACAoC,YAAAA,CAAapB,EAAWT,GAAU,IAAA8B,EAC9B,MAAkBC,EAAY/B,EAAS+B,UACvC,GAAc,OAATA,QAAS,IAATA,IAAAA,EAAWC,MACZ,OAEJ,MAAMC,GAAQC,EAAAA,EAAAA,IAAyBH,EAAUC,MAAOhC,EAASmC,iBAAkBX,EAAqB,QAAjBM,EAAGC,EAAUP,YAAI,IAAAM,EAAAA,EAAI7C,EAC5G,IAAKgD,EACD,OAEJ,MAAMzC,EAAM,GAAH4C,OAAMH,EAAK,KAAAG,OAAIZ,GAAQa,EAAejD,KAAKC,gBAAgBiD,IAAI9C,GACxE,GAAI6C,EAEA,YADArC,EAASP,UAAY4C,GAGzB,MAAME,EAbS,GAaIC,EAAAA,EAAAA,IAAYxC,EAASyC,KAAKT,OAC7C,IAAIvC,EACJ,MAAMiD,GAAUF,EAAAA,EAAAA,IAAYxC,EAASyC,KAAKT,OAC1C,GAA+B,qBAApBW,gBAAiC,CACxC,MAAMC,EAAS,IAAID,gBAAgBJ,EAAYA,GAAaxC,EAAU6C,EAAOC,WAAW,MACxF,IAAK9C,EACD,OAEJA,EAAQyB,KAAO,OAAHY,OArBD,EAqBWM,EAAgB,OAAAN,OAAMZ,GAC5CzB,EAAQ+C,aAAe,SACvB/C,EAAQgD,UAAY,SACpBhD,EAAQiD,SAASf,EAAOS,EAASA,GACjCjD,EAAYmD,EAAOK,uBACvB,KACK,CACD,MAAML,EAASM,SAASC,cAAc,UACtCP,EAAOQ,MAAQb,EACfK,EAAOS,OAASd,EAChB,MAAMxC,EAAU6C,EAAOC,WAAW,MAClC,IAAK9C,EACD,OAEJA,EAAQyB,KAAO,OAAHY,OAnCD,EAmCWM,EAAgB,OAAAN,OAAMZ,GAC5CzB,EAAQ+C,aAAe,SACvB/C,EAAQgD,UAAY,SACpBhD,EAAQiD,SAASf,EAAOS,EAASA,GACjCjD,EAAYmD,CAChB,CACAxD,KAAKC,gBAAgBiE,IAAI9D,EAAKC,GAC9BO,EAASP,UAAYA,CACzB,E","sources":["../node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js","../node_modules/@tsparticles/shape-emoji/browser/Utils.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    draw(data) {\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n    }\n}\n","export function drawEmoji(data) {\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\n    if (!emojiData) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n"],"names":["defaultFont","EmojiDrawer","constructor","this","_emojiShapeDict","Map","destroy","key","emojiData","ImageBitmap","close","delete","draw","data","context","particle","radius","opacity","diameter","previousAlpha","globalAlpha","drawImage","drawEmoji","init","container","options","actualOptions","validTypes","find","t","isInArray","particles","shape","type","promises","loadFont","shapeOptions","map","executeOnSingleOrMultiple","font","push","Promise","all","particleDestroy","particleInit","_shapeData$font","shapeData","value","emoji","itemFromSingleOrMultiple","randomIndexData","concat","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set"],"sourceRoot":""}