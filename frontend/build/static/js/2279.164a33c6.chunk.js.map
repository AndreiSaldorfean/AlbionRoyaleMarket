{"version":3,"file":"static/js/2279.164a33c6.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js","../node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js"],"sourcesContent":["import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n"],"names":["calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","clamp","bubbleMode","Bubbler","ExternalInteractorBase","constructor","container","super","this","_clickBubble","options","actualOptions","mouseClickPos","interactivity","mouse","clickPosition","bubbleOptions","modes","bubble","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","isEnabled","particle","_container$interactiv","_particle$opacity$val","_particle$opacity","clicking","inRange","durationEnd","pos","getPosition","distMouse","getDistance","timeSpent","Date","getTime","clickTime","millisecondsToSeconds","duration","sizeData","bubbleObj","optValue","bubbleModeSize","radius","particlesObj","getRangeMax","size","pixelRatio","type","_process","opacityData","opacity","_hoverBubbleColor","color","_hoverBubble","mousePos","position","pointDistance","status","mouseMoveEvent","_hoverBubbleSize","_hoverBubbleOpacity","reset","mouseLeaveEvent","divBubble","finalColor","modeColor","bubbleColor","itemFromSingleOrMultiple","rangeColorToHsl","mix","undefined","pColor","getFillColor","rgbToHsl","colorMix","_divBubble$opacity","_options$interactivit","_particle$opacity$val2","_particle$opacity2","modeOpacity","optOpacity","modeSize","optSize","data","_data$particlesObj$va","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","_singleSelectorHover","delta","selector","div","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","Circle","Rectangle","contains","divs","divMode","clear","handleClickMode","mode","force","init","interact","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","onDiv","isInArray","divModeExecute","_particle$interactivi","isDivModeEnabled","loadModeOptions","Bubble","_len","arguments","sources","Array","_key","source","load"],"sourceRoot":""}